/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.reestr.kontraktov.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.reestr.kontraktov.model.reestr_kontraktov;
import tj.reestr.kontraktov.model.reestr_kontraktovModel;
import tj.reestr.kontraktov.model.reestr_kontraktovSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the reestr_kontraktov service. Represents a row in the &quot;sapp.reestr_kontraktov&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link reestr_kontraktovModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link reestr_kontraktovImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see reestr_kontraktovImpl
 * @see reestr_kontraktov
 * @see reestr_kontraktovModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class reestr_kontraktovModelImpl extends BaseModelImpl<reestr_kontraktov>
	implements reestr_kontraktovModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a reestr_kontraktov model instance should use the {@link reestr_kontraktov} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.reestr_kontraktov";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_kontrakta", Types.TIMESTAMP },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "izvewenie_id", Types.BIGINT },
			{ "lot_id", Types.BIGINT },
			{ "postavwik_id", Types.BIGINT },
			{ "reestr_kontraktov_id", Types.VARCHAR },
			{ "sozdal", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_kontrakta", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lot_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postavwik_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reestr_kontraktov_id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.reestr_kontraktov (data_kontrakta DATE null,data_sozdanija DATE null,izvewenie_id LONG,lot_id LONG,postavwik_id LONG,reestr_kontraktov_id VARCHAR(75) not null primary key,sozdal LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.reestr_kontraktov";
	public static final String ORDER_BY_JPQL = " ORDER BY reestr_kontraktov.reestr_kontraktov_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.reestr_kontraktov.reestr_kontraktov_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.reestr.kontraktov.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.reestr.kontraktov.model.reestr_kontraktov"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.reestr.kontraktov.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.reestr.kontraktov.model.reestr_kontraktov"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static reestr_kontraktov toModel(reestr_kontraktovSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		reestr_kontraktov model = new reestr_kontraktovImpl();

		model.setData_kontrakta(soapModel.getData_kontrakta());
		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setLot_id(soapModel.getLot_id());
		model.setPostavwik_id(soapModel.getPostavwik_id());
		model.setReestr_kontraktov_id(soapModel.getReestr_kontraktov_id());
		model.setSozdal(soapModel.getSozdal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<reestr_kontraktov> toModels(
		reestr_kontraktovSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<reestr_kontraktov> models = new ArrayList<reestr_kontraktov>(soapModels.length);

		for (reestr_kontraktovSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.reestr.kontraktov.service.util.ServiceProps.get(
				"lock.expiration.time.tj.reestr.kontraktov.model.reestr_kontraktov"));

	public reestr_kontraktovModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _reestr_kontraktov_id;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setReestr_kontraktov_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reestr_kontraktov_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return reestr_kontraktov.class;
	}

	@Override
	public String getModelClassName() {
		return reestr_kontraktov.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_kontrakta", getData_kontrakta());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("lot_id", getLot_id());
		attributes.put("postavwik_id", getPostavwik_id());
		attributes.put("reestr_kontraktov_id", getReestr_kontraktov_id());
		attributes.put("sozdal", getSozdal());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_kontrakta = (Date)attributes.get("data_kontrakta");

		if (data_kontrakta != null) {
			setData_kontrakta(data_kontrakta);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		Long lot_id = (Long)attributes.get("lot_id");

		if (lot_id != null) {
			setLot_id(lot_id);
		}

		Long postavwik_id = (Long)attributes.get("postavwik_id");

		if (postavwik_id != null) {
			setPostavwik_id(postavwik_id);
		}

		String reestr_kontraktov_id = (String)attributes.get(
				"reestr_kontraktov_id");

		if (reestr_kontraktov_id != null) {
			setReestr_kontraktov_id(reestr_kontraktov_id);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}
	}

	@JSON
	@Override
	public Date getData_kontrakta() {
		return _data_kontrakta;
	}

	@Override
	public void setData_kontrakta(Date data_kontrakta) {
		_data_kontrakta = data_kontrakta;
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public long getLot_id() {
		return _lot_id;
	}

	@Override
	public void setLot_id(long lot_id) {
		_lot_id = lot_id;
	}

	@JSON
	@Override
	public long getPostavwik_id() {
		return _postavwik_id;
	}

	@Override
	public void setPostavwik_id(long postavwik_id) {
		_postavwik_id = postavwik_id;
	}

	@JSON
	@Override
	public String getReestr_kontraktov_id() {
		if (_reestr_kontraktov_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _reestr_kontraktov_id;
		}
	}

	@Override
	public void setReestr_kontraktov_id(String reestr_kontraktov_id) {
		_reestr_kontraktov_id = reestr_kontraktov_id;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public reestr_kontraktov toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (reestr_kontraktov)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		reestr_kontraktovImpl reestr_kontraktovImpl = new reestr_kontraktovImpl();

		reestr_kontraktovImpl.setData_kontrakta(getData_kontrakta());
		reestr_kontraktovImpl.setData_sozdanija(getData_sozdanija());
		reestr_kontraktovImpl.setIzvewenie_id(getIzvewenie_id());
		reestr_kontraktovImpl.setLot_id(getLot_id());
		reestr_kontraktovImpl.setPostavwik_id(getPostavwik_id());
		reestr_kontraktovImpl.setReestr_kontraktov_id(getReestr_kontraktov_id());
		reestr_kontraktovImpl.setSozdal(getSozdal());

		reestr_kontraktovImpl.resetOriginalValues();

		return reestr_kontraktovImpl;
	}

	@Override
	public int compareTo(reestr_kontraktov reestr_kontraktov) {
		String primaryKey = reestr_kontraktov.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof reestr_kontraktov)) {
			return false;
		}

		reestr_kontraktov reestr_kontraktov = (reestr_kontraktov)obj;

		String primaryKey = reestr_kontraktov.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<reestr_kontraktov> toCacheModel() {
		reestr_kontraktovCacheModel reestr_kontraktovCacheModel = new reestr_kontraktovCacheModel();

		Date data_kontrakta = getData_kontrakta();

		if (data_kontrakta != null) {
			reestr_kontraktovCacheModel.data_kontrakta = data_kontrakta.getTime();
		}
		else {
			reestr_kontraktovCacheModel.data_kontrakta = Long.MIN_VALUE;
		}

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			reestr_kontraktovCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			reestr_kontraktovCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		reestr_kontraktovCacheModel.izvewenie_id = getIzvewenie_id();

		reestr_kontraktovCacheModel.lot_id = getLot_id();

		reestr_kontraktovCacheModel.postavwik_id = getPostavwik_id();

		reestr_kontraktovCacheModel.reestr_kontraktov_id = getReestr_kontraktov_id();

		String reestr_kontraktov_id = reestr_kontraktovCacheModel.reestr_kontraktov_id;

		if ((reestr_kontraktov_id != null) &&
				(reestr_kontraktov_id.length() == 0)) {
			reestr_kontraktovCacheModel.reestr_kontraktov_id = null;
		}

		reestr_kontraktovCacheModel.sozdal = getSozdal();

		return reestr_kontraktovCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{data_kontrakta=");
		sb.append(getData_kontrakta());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", lot_id=");
		sb.append(getLot_id());
		sb.append(", postavwik_id=");
		sb.append(getPostavwik_id());
		sb.append(", reestr_kontraktov_id=");
		sb.append(getReestr_kontraktov_id());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("tj.reestr.kontraktov.model.reestr_kontraktov");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_kontrakta</column-name><column-value><![CDATA[");
		sb.append(getData_kontrakta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lot_id</column-name><column-value><![CDATA[");
		sb.append(getLot_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postavwik_id</column-name><column-value><![CDATA[");
		sb.append(getPostavwik_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reestr_kontraktov_id</column-name><column-value><![CDATA[");
		sb.append(getReestr_kontraktov_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = reestr_kontraktov.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			reestr_kontraktov.class
		};
	private Date _data_kontrakta;
	private Date _data_sozdanija;
	private long _izvewenie_id;
	private long _lot_id;
	private long _postavwik_id;
	private String _reestr_kontraktov_id;
	private long _sozdal;
	private reestr_kontraktov _escapedModel;
}