/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.prichiny.otmeny.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.prichiny.otmeny.model.prichiny_otmeny;
import tj.prichiny.otmeny.model.prichiny_otmenyModel;
import tj.prichiny.otmeny.model.prichiny_otmenySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the prichiny_otmeny service. Represents a row in the &quot;sapp.prichiny_otmeny&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link prichiny_otmenyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link prichiny_otmenyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see prichiny_otmenyImpl
 * @see prichiny_otmeny
 * @see prichiny_otmenyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class prichiny_otmenyModelImpl extends BaseModelImpl<prichiny_otmeny>
	implements prichiny_otmenyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a prichiny_otmeny model instance should use the {@link prichiny_otmeny} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.prichiny_otmeny";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "izmenil", Types.BIGINT },
			{ "izvewenie_id", Types.BIGINT },
			{ "prichina", Types.VARCHAR },
			{ "prichiny_otmeny_id", Types.BIGINT },
			{ "sozdal", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("prichina", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prichiny_otmeny_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.prichiny_otmeny (data_izmenenija DATE null,data_sozdanija DATE null,izmenil LONG,izvewenie_id LONG,prichina VARCHAR(75) null,prichiny_otmeny_id LONG not null primary key,sozdal LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.prichiny_otmeny";
	public static final String ORDER_BY_JPQL = " ORDER BY prichiny_otmeny.prichiny_otmeny_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.prichiny_otmeny.prichiny_otmeny_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.prichiny.otmeny.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.prichiny.otmeny.model.prichiny_otmeny"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.prichiny.otmeny.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.prichiny.otmeny.model.prichiny_otmeny"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static prichiny_otmeny toModel(prichiny_otmenySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		prichiny_otmeny model = new prichiny_otmenyImpl();

		model.setData_izmenenija(soapModel.getData_izmenenija());
		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setIzmenil(soapModel.getIzmenil());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setPrichina(soapModel.getPrichina());
		model.setPrichiny_otmeny_id(soapModel.getPrichiny_otmeny_id());
		model.setSozdal(soapModel.getSozdal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<prichiny_otmeny> toModels(
		prichiny_otmenySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<prichiny_otmeny> models = new ArrayList<prichiny_otmeny>(soapModels.length);

		for (prichiny_otmenySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.prichiny.otmeny.service.util.ServiceProps.get(
				"lock.expiration.time.tj.prichiny.otmeny.model.prichiny_otmeny"));

	public prichiny_otmenyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _prichiny_otmeny_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPrichiny_otmeny_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _prichiny_otmeny_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return prichiny_otmeny.class;
	}

	@Override
	public String getModelClassName() {
		return prichiny_otmeny.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("izmenil", getIzmenil());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("prichina", getPrichina());
		attributes.put("prichiny_otmeny_id", getPrichiny_otmeny_id());
		attributes.put("sozdal", getSozdal());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		String prichina = (String)attributes.get("prichina");

		if (prichina != null) {
			setPrichina(prichina);
		}

		Long prichiny_otmeny_id = (Long)attributes.get("prichiny_otmeny_id");

		if (prichiny_otmeny_id != null) {
			setPrichiny_otmeny_id(prichiny_otmeny_id);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}
	}

	@JSON
	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public String getPrichina() {
		if (_prichina == null) {
			return StringPool.BLANK;
		}
		else {
			return _prichina;
		}
	}

	@Override
	public void setPrichina(String prichina) {
		_prichina = prichina;
	}

	@JSON
	@Override
	public long getPrichiny_otmeny_id() {
		return _prichiny_otmeny_id;
	}

	@Override
	public void setPrichiny_otmeny_id(long prichiny_otmeny_id) {
		_prichiny_otmeny_id = prichiny_otmeny_id;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			prichiny_otmeny.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public prichiny_otmeny toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (prichiny_otmeny)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		prichiny_otmenyImpl prichiny_otmenyImpl = new prichiny_otmenyImpl();

		prichiny_otmenyImpl.setData_izmenenija(getData_izmenenija());
		prichiny_otmenyImpl.setData_sozdanija(getData_sozdanija());
		prichiny_otmenyImpl.setIzmenil(getIzmenil());
		prichiny_otmenyImpl.setIzvewenie_id(getIzvewenie_id());
		prichiny_otmenyImpl.setPrichina(getPrichina());
		prichiny_otmenyImpl.setPrichiny_otmeny_id(getPrichiny_otmeny_id());
		prichiny_otmenyImpl.setSozdal(getSozdal());

		prichiny_otmenyImpl.resetOriginalValues();

		return prichiny_otmenyImpl;
	}

	@Override
	public int compareTo(prichiny_otmeny prichiny_otmeny) {
		long primaryKey = prichiny_otmeny.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof prichiny_otmeny)) {
			return false;
		}

		prichiny_otmeny prichiny_otmeny = (prichiny_otmeny)obj;

		long primaryKey = prichiny_otmeny.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<prichiny_otmeny> toCacheModel() {
		prichiny_otmenyCacheModel prichiny_otmenyCacheModel = new prichiny_otmenyCacheModel();

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			prichiny_otmenyCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			prichiny_otmenyCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			prichiny_otmenyCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			prichiny_otmenyCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		prichiny_otmenyCacheModel.izmenil = getIzmenil();

		prichiny_otmenyCacheModel.izvewenie_id = getIzvewenie_id();

		prichiny_otmenyCacheModel.prichina = getPrichina();

		String prichina = prichiny_otmenyCacheModel.prichina;

		if ((prichina != null) && (prichina.length() == 0)) {
			prichiny_otmenyCacheModel.prichina = null;
		}

		prichiny_otmenyCacheModel.prichiny_otmeny_id = getPrichiny_otmeny_id();

		prichiny_otmenyCacheModel.sozdal = getSozdal();

		return prichiny_otmenyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", prichina=");
		sb.append(getPrichina());
		sb.append(", prichiny_otmeny_id=");
		sb.append(getPrichiny_otmeny_id());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("tj.prichiny.otmeny.model.prichiny_otmeny");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prichina</column-name><column-value><![CDATA[");
		sb.append(getPrichina());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prichiny_otmeny_id</column-name><column-value><![CDATA[");
		sb.append(getPrichiny_otmeny_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = prichiny_otmeny.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			prichiny_otmeny.class
		};
	private Date _data_izmenenija;
	private Date _data_sozdanija;
	private long _izmenil;
	private long _izvewenie_id;
	private String _prichina;
	private long _prichiny_otmeny_id;
	private long _sozdal;
	private prichiny_otmeny _escapedModel;
}