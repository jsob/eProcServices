/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package naruwenija.v.izvewenii.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import naruwenija.v.izvewenii.model.naruwenija_v_izvewenii;
import naruwenija.v.izvewenii.service.naruwenija_v_izveweniiLocalService;
import naruwenija.v.izvewenii.service.persistence.naruwenija_v_izveweniiPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the naruwenija_v_izvewenii local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link naruwenija.v.izvewenii.service.impl.naruwenija_v_izveweniiLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see naruwenija.v.izvewenii.service.impl.naruwenija_v_izveweniiLocalServiceImpl
 * @see naruwenija.v.izvewenii.service.naruwenija_v_izveweniiLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class naruwenija_v_izveweniiLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements naruwenija_v_izveweniiLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link naruwenija.v.izvewenii.service.naruwenija_v_izveweniiLocalServiceUtil} to access the naruwenija_v_izvewenii local service.
	 */

	/**
	 * Adds the naruwenija_v_izvewenii to the database. Also notifies the appropriate model listeners.
	 *
	 * @param naruwenija_v_izvewenii the naruwenija_v_izvewenii
	 * @return the naruwenija_v_izvewenii that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public naruwenija_v_izvewenii addnaruwenija_v_izvewenii(
		naruwenija_v_izvewenii naruwenija_v_izvewenii) {
		naruwenija_v_izvewenii.setNew(true);

		return naruwenija_v_izveweniiPersistence.update(naruwenija_v_izvewenii);
	}

	/**
	 * Creates a new naruwenija_v_izvewenii with the primary key. Does not add the naruwenija_v_izvewenii to the database.
	 *
	 * @param naruwenija_v_izvewenii_id the primary key for the new naruwenija_v_izvewenii
	 * @return the new naruwenija_v_izvewenii
	 */
	@Override
	public naruwenija_v_izvewenii createnaruwenija_v_izvewenii(
		long naruwenija_v_izvewenii_id) {
		return naruwenija_v_izveweniiPersistence.create(naruwenija_v_izvewenii_id);
	}

	/**
	 * Deletes the naruwenija_v_izvewenii with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param naruwenija_v_izvewenii_id the primary key of the naruwenija_v_izvewenii
	 * @return the naruwenija_v_izvewenii that was removed
	 * @throws PortalException if a naruwenija_v_izvewenii with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public naruwenija_v_izvewenii deletenaruwenija_v_izvewenii(
		long naruwenija_v_izvewenii_id) throws PortalException {
		return naruwenija_v_izveweniiPersistence.remove(naruwenija_v_izvewenii_id);
	}

	/**
	 * Deletes the naruwenija_v_izvewenii from the database. Also notifies the appropriate model listeners.
	 *
	 * @param naruwenija_v_izvewenii the naruwenija_v_izvewenii
	 * @return the naruwenija_v_izvewenii that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public naruwenija_v_izvewenii deletenaruwenija_v_izvewenii(
		naruwenija_v_izvewenii naruwenija_v_izvewenii) {
		return naruwenija_v_izveweniiPersistence.remove(naruwenija_v_izvewenii);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(naruwenija_v_izvewenii.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return naruwenija_v_izveweniiPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link naruwenija.v.izvewenii.model.impl.naruwenija_v_izveweniiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return naruwenija_v_izveweniiPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link naruwenija.v.izvewenii.model.impl.naruwenija_v_izveweniiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return naruwenija_v_izveweniiPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return naruwenija_v_izveweniiPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return naruwenija_v_izveweniiPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public naruwenija_v_izvewenii fetchnaruwenija_v_izvewenii(
		long naruwenija_v_izvewenii_id) {
		return naruwenija_v_izveweniiPersistence.fetchByPrimaryKey(naruwenija_v_izvewenii_id);
	}

	/**
	 * Returns the naruwenija_v_izvewenii with the primary key.
	 *
	 * @param naruwenija_v_izvewenii_id the primary key of the naruwenija_v_izvewenii
	 * @return the naruwenija_v_izvewenii
	 * @throws PortalException if a naruwenija_v_izvewenii with the primary key could not be found
	 */
	@Override
	public naruwenija_v_izvewenii getnaruwenija_v_izvewenii(
		long naruwenija_v_izvewenii_id) throws PortalException {
		return naruwenija_v_izveweniiPersistence.findByPrimaryKey(naruwenija_v_izvewenii_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(naruwenija_v_izveweniiLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(naruwenija_v_izvewenii.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"naruwenija_v_izvewenii_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(naruwenija_v_izveweniiLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(naruwenija_v_izvewenii.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"naruwenija_v_izvewenii_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(naruwenija_v_izveweniiLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(naruwenija_v_izvewenii.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"naruwenija_v_izvewenii_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return naruwenija_v_izveweniiLocalService.deletenaruwenija_v_izvewenii((naruwenija_v_izvewenii)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return naruwenija_v_izveweniiPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the naruwenija_v_izveweniis.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link naruwenija.v.izvewenii.model.impl.naruwenija_v_izveweniiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of naruwenija_v_izveweniis
	 * @param end the upper bound of the range of naruwenija_v_izveweniis (not inclusive)
	 * @return the range of naruwenija_v_izveweniis
	 */
	@Override
	public List<naruwenija_v_izvewenii> getnaruwenija_v_izveweniis(int start,
		int end) {
		return naruwenija_v_izveweniiPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of naruwenija_v_izveweniis.
	 *
	 * @return the number of naruwenija_v_izveweniis
	 */
	@Override
	public int getnaruwenija_v_izveweniisCount() {
		return naruwenija_v_izveweniiPersistence.countAll();
	}

	/**
	 * Updates the naruwenija_v_izvewenii in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param naruwenija_v_izvewenii the naruwenija_v_izvewenii
	 * @return the naruwenija_v_izvewenii that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public naruwenija_v_izvewenii updatenaruwenija_v_izvewenii(
		naruwenija_v_izvewenii naruwenija_v_izvewenii) {
		return naruwenija_v_izveweniiPersistence.update(naruwenija_v_izvewenii);
	}

	/**
	 * Returns the naruwenija_v_izvewenii local service.
	 *
	 * @return the naruwenija_v_izvewenii local service
	 */
	public naruwenija_v_izveweniiLocalService getnaruwenija_v_izveweniiLocalService() {
		return naruwenija_v_izveweniiLocalService;
	}

	/**
	 * Sets the naruwenija_v_izvewenii local service.
	 *
	 * @param naruwenija_v_izveweniiLocalService the naruwenija_v_izvewenii local service
	 */
	public void setnaruwenija_v_izveweniiLocalService(
		naruwenija_v_izveweniiLocalService naruwenija_v_izveweniiLocalService) {
		this.naruwenija_v_izveweniiLocalService = naruwenija_v_izveweniiLocalService;
	}

	/**
	 * Returns the naruwenija_v_izvewenii persistence.
	 *
	 * @return the naruwenija_v_izvewenii persistence
	 */
	public naruwenija_v_izveweniiPersistence getnaruwenija_v_izveweniiPersistence() {
		return naruwenija_v_izveweniiPersistence;
	}

	/**
	 * Sets the naruwenija_v_izvewenii persistence.
	 *
	 * @param naruwenija_v_izveweniiPersistence the naruwenija_v_izvewenii persistence
	 */
	public void setnaruwenija_v_izveweniiPersistence(
		naruwenija_v_izveweniiPersistence naruwenija_v_izveweniiPersistence) {
		this.naruwenija_v_izveweniiPersistence = naruwenija_v_izveweniiPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("naruwenija.v.izvewenii.model.naruwenija_v_izvewenii",
			naruwenija_v_izveweniiLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"naruwenija.v.izvewenii.model.naruwenija_v_izvewenii");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return naruwenija_v_izveweniiLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return naruwenija_v_izvewenii.class;
	}

	protected String getModelClassName() {
		return naruwenija_v_izvewenii.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = naruwenija_v_izveweniiPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = naruwenija_v_izveweniiLocalService.class)
	protected naruwenija_v_izveweniiLocalService naruwenija_v_izveweniiLocalService;
	@BeanReference(type = naruwenija_v_izveweniiPersistence.class)
	protected naruwenija_v_izveweniiPersistence naruwenija_v_izveweniiPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}