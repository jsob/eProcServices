/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package naruwenija.v.izvewenii.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import naruwenija.v.izvewenii.model.naruwenija_v_izvewenii;
import naruwenija.v.izvewenii.model.naruwenija_v_izveweniiModel;
import naruwenija.v.izvewenii.model.naruwenija_v_izveweniiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the naruwenija_v_izvewenii service. Represents a row in the &quot;sapp.naruwenija_v_izvewenii&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link naruwenija_v_izveweniiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link naruwenija_v_izveweniiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see naruwenija_v_izveweniiImpl
 * @see naruwenija_v_izvewenii
 * @see naruwenija_v_izveweniiModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class naruwenija_v_izveweniiModelImpl extends BaseModelImpl<naruwenija_v_izvewenii>
	implements naruwenija_v_izveweniiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a naruwenija_v_izvewenii model instance should use the {@link naruwenija_v_izvewenii} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.naruwenija_v_izvewenii";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "izvewenie_id", Types.BIGINT },
			{ "naruwenie", Types.VARCHAR },
			{ "naruwenija_v_izvewenii_id", Types.BIGINT },
			{ "nomer_razdela", Types.BIGINT },
			{ "sozdal", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("naruwenie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("naruwenija_v_izvewenii_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nomer_razdela", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.naruwenija_v_izvewenii (data_sozdanija DATE null,izvewenie_id LONG,naruwenie VARCHAR(75) null,naruwenija_v_izvewenii_id LONG not null primary key,nomer_razdela LONG,sozdal LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.naruwenija_v_izvewenii";
	public static final String ORDER_BY_JPQL = " ORDER BY naruwenija_v_izvewenii.naruwenija_v_izvewenii_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.naruwenija_v_izvewenii.naruwenija_v_izvewenii_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(naruwenija.v.izvewenii.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.naruwenija.v.izvewenii.model.naruwenija_v_izvewenii"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(naruwenija.v.izvewenii.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.naruwenija.v.izvewenii.model.naruwenija_v_izvewenii"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static naruwenija_v_izvewenii toModel(
		naruwenija_v_izveweniiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		naruwenija_v_izvewenii model = new naruwenija_v_izveweniiImpl();

		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setNaruwenie(soapModel.getNaruwenie());
		model.setNaruwenija_v_izvewenii_id(soapModel.getNaruwenija_v_izvewenii_id());
		model.setNomer_razdela(soapModel.getNomer_razdela());
		model.setSozdal(soapModel.getSozdal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<naruwenija_v_izvewenii> toModels(
		naruwenija_v_izveweniiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<naruwenija_v_izvewenii> models = new ArrayList<naruwenija_v_izvewenii>(soapModels.length);

		for (naruwenija_v_izveweniiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(naruwenija.v.izvewenii.service.util.ServiceProps.get(
				"lock.expiration.time.naruwenija.v.izvewenii.model.naruwenija_v_izvewenii"));

	public naruwenija_v_izveweniiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _naruwenija_v_izvewenii_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNaruwenija_v_izvewenii_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _naruwenija_v_izvewenii_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return naruwenija_v_izvewenii.class;
	}

	@Override
	public String getModelClassName() {
		return naruwenija_v_izvewenii.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("naruwenie", getNaruwenie());
		attributes.put("naruwenija_v_izvewenii_id",
			getNaruwenija_v_izvewenii_id());
		attributes.put("nomer_razdela", getNomer_razdela());
		attributes.put("sozdal", getSozdal());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		String naruwenie = (String)attributes.get("naruwenie");

		if (naruwenie != null) {
			setNaruwenie(naruwenie);
		}

		Long naruwenija_v_izvewenii_id = (Long)attributes.get(
				"naruwenija_v_izvewenii_id");

		if (naruwenija_v_izvewenii_id != null) {
			setNaruwenija_v_izvewenii_id(naruwenija_v_izvewenii_id);
		}

		Long nomer_razdela = (Long)attributes.get("nomer_razdela");

		if (nomer_razdela != null) {
			setNomer_razdela(nomer_razdela);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public String getNaruwenie() {
		if (_naruwenie == null) {
			return StringPool.BLANK;
		}
		else {
			return _naruwenie;
		}
	}

	@Override
	public void setNaruwenie(String naruwenie) {
		_naruwenie = naruwenie;
	}

	@JSON
	@Override
	public long getNaruwenija_v_izvewenii_id() {
		return _naruwenija_v_izvewenii_id;
	}

	@Override
	public void setNaruwenija_v_izvewenii_id(long naruwenija_v_izvewenii_id) {
		_naruwenija_v_izvewenii_id = naruwenija_v_izvewenii_id;
	}

	@JSON
	@Override
	public long getNomer_razdela() {
		return _nomer_razdela;
	}

	@Override
	public void setNomer_razdela(long nomer_razdela) {
		_nomer_razdela = nomer_razdela;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			naruwenija_v_izvewenii.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public naruwenija_v_izvewenii toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (naruwenija_v_izvewenii)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		naruwenija_v_izveweniiImpl naruwenija_v_izveweniiImpl = new naruwenija_v_izveweniiImpl();

		naruwenija_v_izveweniiImpl.setData_sozdanija(getData_sozdanija());
		naruwenija_v_izveweniiImpl.setIzvewenie_id(getIzvewenie_id());
		naruwenija_v_izveweniiImpl.setNaruwenie(getNaruwenie());
		naruwenija_v_izveweniiImpl.setNaruwenija_v_izvewenii_id(getNaruwenija_v_izvewenii_id());
		naruwenija_v_izveweniiImpl.setNomer_razdela(getNomer_razdela());
		naruwenija_v_izveweniiImpl.setSozdal(getSozdal());

		naruwenija_v_izveweniiImpl.resetOriginalValues();

		return naruwenija_v_izveweniiImpl;
	}

	@Override
	public int compareTo(naruwenija_v_izvewenii naruwenija_v_izvewenii) {
		long primaryKey = naruwenija_v_izvewenii.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof naruwenija_v_izvewenii)) {
			return false;
		}

		naruwenija_v_izvewenii naruwenija_v_izvewenii = (naruwenija_v_izvewenii)obj;

		long primaryKey = naruwenija_v_izvewenii.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<naruwenija_v_izvewenii> toCacheModel() {
		naruwenija_v_izveweniiCacheModel naruwenija_v_izveweniiCacheModel = new naruwenija_v_izveweniiCacheModel();

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			naruwenija_v_izveweniiCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			naruwenija_v_izveweniiCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		naruwenija_v_izveweniiCacheModel.izvewenie_id = getIzvewenie_id();

		naruwenija_v_izveweniiCacheModel.naruwenie = getNaruwenie();

		String naruwenie = naruwenija_v_izveweniiCacheModel.naruwenie;

		if ((naruwenie != null) && (naruwenie.length() == 0)) {
			naruwenija_v_izveweniiCacheModel.naruwenie = null;
		}

		naruwenija_v_izveweniiCacheModel.naruwenija_v_izvewenii_id = getNaruwenija_v_izvewenii_id();

		naruwenija_v_izveweniiCacheModel.nomer_razdela = getNomer_razdela();

		naruwenija_v_izveweniiCacheModel.sozdal = getSozdal();

		return naruwenija_v_izveweniiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", naruwenie=");
		sb.append(getNaruwenie());
		sb.append(", naruwenija_v_izvewenii_id=");
		sb.append(getNaruwenija_v_izvewenii_id());
		sb.append(", nomer_razdela=");
		sb.append(getNomer_razdela());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("naruwenija.v.izvewenii.model.naruwenija_v_izvewenii");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naruwenie</column-name><column-value><![CDATA[");
		sb.append(getNaruwenie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naruwenija_v_izvewenii_id</column-name><column-value><![CDATA[");
		sb.append(getNaruwenija_v_izvewenii_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nomer_razdela</column-name><column-value><![CDATA[");
		sb.append(getNomer_razdela());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = naruwenija_v_izvewenii.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			naruwenija_v_izvewenii.class
		};
	private Date _data_sozdanija;
	private long _izvewenie_id;
	private String _naruwenie;
	private long _naruwenija_v_izvewenii_id;
	private long _nomer_razdela;
	private long _sozdal;
	private naruwenija_v_izvewenii _escapedModel;
}