/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.istorija.popolnenij.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.istorija.popolnenij.model.istorija_popolnenij;
import tj.istorija.popolnenij.model.istorija_popolnenijModel;
import tj.istorija.popolnenij.model.istorija_popolnenijSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the istorija_popolnenij service. Represents a row in the &quot;sapp.istorija_popolnenij&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link istorija_popolnenijModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link istorija_popolnenijImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see istorija_popolnenijImpl
 * @see istorija_popolnenij
 * @see istorija_popolnenijModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class istorija_popolnenijModelImpl extends BaseModelImpl<istorija_popolnenij>
	implements istorija_popolnenijModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a istorija_popolnenij model instance should use the {@link istorija_popolnenij} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.istorija_popolnenij";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_zachislenija", Types.TIMESTAMP },
			{ "istorija_popolnenij_id", Types.BIGINT },
			{ "nomer", Types.VARCHAR },
			{ "postavwik_id", Types.BIGINT },
			{ "put", Types.VARCHAR },
			{ "summa", Types.DOUBLE },
			{ "tip", Types.VARCHAR },
			{ "tranzakcija", Types.VARCHAR },
			{ "zachislil", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_zachislenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("istorija_popolnenij_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nomer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postavwik_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("put", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summa", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tranzakcija", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zachislil", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.istorija_popolnenij (data_zachislenija DATE null,istorija_popolnenij_id LONG not null primary key,nomer VARCHAR(75) null,postavwik_id LONG,put VARCHAR(75) null,summa DOUBLE,tip VARCHAR(75) null,tranzakcija VARCHAR(75) null,zachislil LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.istorija_popolnenij";
	public static final String ORDER_BY_JPQL = " ORDER BY istorija_popolnenij.istorija_popolnenij_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.istorija_popolnenij.istorija_popolnenij_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.istorija.popolnenij.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.istorija.popolnenij.model.istorija_popolnenij"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.istorija.popolnenij.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.istorija.popolnenij.model.istorija_popolnenij"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static istorija_popolnenij toModel(istorija_popolnenijSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		istorija_popolnenij model = new istorija_popolnenijImpl();

		model.setData_zachislenija(soapModel.getData_zachislenija());
		model.setIstorija_popolnenij_id(soapModel.getIstorija_popolnenij_id());
		model.setNomer(soapModel.getNomer());
		model.setPostavwik_id(soapModel.getPostavwik_id());
		model.setPut(soapModel.getPut());
		model.setSumma(soapModel.getSumma());
		model.setTip(soapModel.getTip());
		model.setTranzakcija(soapModel.getTranzakcija());
		model.setZachislil(soapModel.getZachislil());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<istorija_popolnenij> toModels(
		istorija_popolnenijSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<istorija_popolnenij> models = new ArrayList<istorija_popolnenij>(soapModels.length);

		for (istorija_popolnenijSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.istorija.popolnenij.service.util.ServiceProps.get(
				"lock.expiration.time.tj.istorija.popolnenij.model.istorija_popolnenij"));

	public istorija_popolnenijModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _istorija_popolnenij_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIstorija_popolnenij_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _istorija_popolnenij_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return istorija_popolnenij.class;
	}

	@Override
	public String getModelClassName() {
		return istorija_popolnenij.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_zachislenija", getData_zachislenija());
		attributes.put("istorija_popolnenij_id", getIstorija_popolnenij_id());
		attributes.put("nomer", getNomer());
		attributes.put("postavwik_id", getPostavwik_id());
		attributes.put("put", getPut());
		attributes.put("summa", getSumma());
		attributes.put("tip", getTip());
		attributes.put("tranzakcija", getTranzakcija());
		attributes.put("zachislil", getZachislil());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_zachislenija = (Date)attributes.get("data_zachislenija");

		if (data_zachislenija != null) {
			setData_zachislenija(data_zachislenija);
		}

		Long istorija_popolnenij_id = (Long)attributes.get(
				"istorija_popolnenij_id");

		if (istorija_popolnenij_id != null) {
			setIstorija_popolnenij_id(istorija_popolnenij_id);
		}

		String nomer = (String)attributes.get("nomer");

		if (nomer != null) {
			setNomer(nomer);
		}

		Long postavwik_id = (Long)attributes.get("postavwik_id");

		if (postavwik_id != null) {
			setPostavwik_id(postavwik_id);
		}

		String put = (String)attributes.get("put");

		if (put != null) {
			setPut(put);
		}

		Double summa = (Double)attributes.get("summa");

		if (summa != null) {
			setSumma(summa);
		}

		String tip = (String)attributes.get("tip");

		if (tip != null) {
			setTip(tip);
		}

		String tranzakcija = (String)attributes.get("tranzakcija");

		if (tranzakcija != null) {
			setTranzakcija(tranzakcija);
		}

		Long zachislil = (Long)attributes.get("zachislil");

		if (zachislil != null) {
			setZachislil(zachislil);
		}
	}

	@JSON
	@Override
	public Date getData_zachislenija() {
		return _data_zachislenija;
	}

	@Override
	public void setData_zachislenija(Date data_zachislenija) {
		_data_zachislenija = data_zachislenija;
	}

	@JSON
	@Override
	public long getIstorija_popolnenij_id() {
		return _istorija_popolnenij_id;
	}

	@Override
	public void setIstorija_popolnenij_id(long istorija_popolnenij_id) {
		_istorija_popolnenij_id = istorija_popolnenij_id;
	}

	@JSON
	@Override
	public String getNomer() {
		if (_nomer == null) {
			return StringPool.BLANK;
		}
		else {
			return _nomer;
		}
	}

	@Override
	public void setNomer(String nomer) {
		_nomer = nomer;
	}

	@JSON
	@Override
	public long getPostavwik_id() {
		return _postavwik_id;
	}

	@Override
	public void setPostavwik_id(long postavwik_id) {
		_postavwik_id = postavwik_id;
	}

	@JSON
	@Override
	public String getPut() {
		if (_put == null) {
			return StringPool.BLANK;
		}
		else {
			return _put;
		}
	}

	@Override
	public void setPut(String put) {
		_put = put;
	}

	@JSON
	@Override
	public double getSumma() {
		return _summa;
	}

	@Override
	public void setSumma(double summa) {
		_summa = summa;
	}

	@JSON
	@Override
	public String getTip() {
		if (_tip == null) {
			return StringPool.BLANK;
		}
		else {
			return _tip;
		}
	}

	@Override
	public void setTip(String tip) {
		_tip = tip;
	}

	@JSON
	@Override
	public String getTranzakcija() {
		if (_tranzakcija == null) {
			return StringPool.BLANK;
		}
		else {
			return _tranzakcija;
		}
	}

	@Override
	public void setTranzakcija(String tranzakcija) {
		_tranzakcija = tranzakcija;
	}

	@JSON
	@Override
	public long getZachislil() {
		return _zachislil;
	}

	@Override
	public void setZachislil(long zachislil) {
		_zachislil = zachislil;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			istorija_popolnenij.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public istorija_popolnenij toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (istorija_popolnenij)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		istorija_popolnenijImpl istorija_popolnenijImpl = new istorija_popolnenijImpl();

		istorija_popolnenijImpl.setData_zachislenija(getData_zachislenija());
		istorija_popolnenijImpl.setIstorija_popolnenij_id(getIstorija_popolnenij_id());
		istorija_popolnenijImpl.setNomer(getNomer());
		istorija_popolnenijImpl.setPostavwik_id(getPostavwik_id());
		istorija_popolnenijImpl.setPut(getPut());
		istorija_popolnenijImpl.setSumma(getSumma());
		istorija_popolnenijImpl.setTip(getTip());
		istorija_popolnenijImpl.setTranzakcija(getTranzakcija());
		istorija_popolnenijImpl.setZachislil(getZachislil());

		istorija_popolnenijImpl.resetOriginalValues();

		return istorija_popolnenijImpl;
	}

	@Override
	public int compareTo(istorija_popolnenij istorija_popolnenij) {
		long primaryKey = istorija_popolnenij.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof istorija_popolnenij)) {
			return false;
		}

		istorija_popolnenij istorija_popolnenij = (istorija_popolnenij)obj;

		long primaryKey = istorija_popolnenij.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<istorija_popolnenij> toCacheModel() {
		istorija_popolnenijCacheModel istorija_popolnenijCacheModel = new istorija_popolnenijCacheModel();

		Date data_zachislenija = getData_zachislenija();

		if (data_zachislenija != null) {
			istorija_popolnenijCacheModel.data_zachislenija = data_zachislenija.getTime();
		}
		else {
			istorija_popolnenijCacheModel.data_zachislenija = Long.MIN_VALUE;
		}

		istorija_popolnenijCacheModel.istorija_popolnenij_id = getIstorija_popolnenij_id();

		istorija_popolnenijCacheModel.nomer = getNomer();

		String nomer = istorija_popolnenijCacheModel.nomer;

		if ((nomer != null) && (nomer.length() == 0)) {
			istorija_popolnenijCacheModel.nomer = null;
		}

		istorija_popolnenijCacheModel.postavwik_id = getPostavwik_id();

		istorija_popolnenijCacheModel.put = getPut();

		String put = istorija_popolnenijCacheModel.put;

		if ((put != null) && (put.length() == 0)) {
			istorija_popolnenijCacheModel.put = null;
		}

		istorija_popolnenijCacheModel.summa = getSumma();

		istorija_popolnenijCacheModel.tip = getTip();

		String tip = istorija_popolnenijCacheModel.tip;

		if ((tip != null) && (tip.length() == 0)) {
			istorija_popolnenijCacheModel.tip = null;
		}

		istorija_popolnenijCacheModel.tranzakcija = getTranzakcija();

		String tranzakcija = istorija_popolnenijCacheModel.tranzakcija;

		if ((tranzakcija != null) && (tranzakcija.length() == 0)) {
			istorija_popolnenijCacheModel.tranzakcija = null;
		}

		istorija_popolnenijCacheModel.zachislil = getZachislil();

		return istorija_popolnenijCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{data_zachislenija=");
		sb.append(getData_zachislenija());
		sb.append(", istorija_popolnenij_id=");
		sb.append(getIstorija_popolnenij_id());
		sb.append(", nomer=");
		sb.append(getNomer());
		sb.append(", postavwik_id=");
		sb.append(getPostavwik_id());
		sb.append(", put=");
		sb.append(getPut());
		sb.append(", summa=");
		sb.append(getSumma());
		sb.append(", tip=");
		sb.append(getTip());
		sb.append(", tranzakcija=");
		sb.append(getTranzakcija());
		sb.append(", zachislil=");
		sb.append(getZachislil());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("tj.istorija.popolnenij.model.istorija_popolnenij");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_zachislenija</column-name><column-value><![CDATA[");
		sb.append(getData_zachislenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>istorija_popolnenij_id</column-name><column-value><![CDATA[");
		sb.append(getIstorija_popolnenij_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nomer</column-name><column-value><![CDATA[");
		sb.append(getNomer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postavwik_id</column-name><column-value><![CDATA[");
		sb.append(getPostavwik_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>put</column-name><column-value><![CDATA[");
		sb.append(getPut());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summa</column-name><column-value><![CDATA[");
		sb.append(getSumma());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tip</column-name><column-value><![CDATA[");
		sb.append(getTip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tranzakcija</column-name><column-value><![CDATA[");
		sb.append(getTranzakcija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zachislil</column-name><column-value><![CDATA[");
		sb.append(getZachislil());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = istorija_popolnenij.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			istorija_popolnenij.class
		};
	private Date _data_zachislenija;
	private long _istorija_popolnenij_id;
	private String _nomer;
	private long _postavwik_id;
	private String _put;
	private double _summa;
	private String _tip;
	private String _tranzakcija;
	private long _zachislil;
	private istorija_popolnenij _escapedModel;
}