/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.polzovateli.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.polzovateli.model.polzovateli;
import tj.polzovateli.model.polzovateliModel;
import tj.polzovateli.model.polzovateliSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the polzovateli service. Represents a row in the &quot;sapp.polzovateli&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link polzovateliModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link polzovateliImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see polzovateliImpl
 * @see polzovateli
 * @see polzovateliModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class polzovateliModelImpl extends BaseModelImpl<polzovateli>
	implements polzovateliModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a polzovateli model instance should use the {@link polzovateli} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.polzovateli";
	public static final Object[][] TABLE_COLUMNS = {
			{ "aktivnost", Types.BIGINT },
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "imja_polzovatelja", Types.VARCHAR },
			{ "izmenil", Types.BIGINT },
			{ "organizacija_id", Types.BIGINT },
			{ "parol", Types.VARCHAR },
			{ "podrazdelenije_id", Types.BIGINT },
			{ "polzovateli_id", Types.BIGINT },
			{ "rol_id", Types.BIGINT },
			{ "sozdal", Types.BIGINT },
			{ "tip_organizacii_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("aktivnost", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("imja_polzovatelja", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("organizacija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("podrazdelenije_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("polzovateli_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rol_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tip_organizacii_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.polzovateli (aktivnost LONG,data_izmenenija DATE null,data_sozdanija DATE null,imja_polzovatelja VARCHAR(75) null,izmenil LONG,organizacija_id LONG,parol VARCHAR(75) null,podrazdelenije_id LONG,polzovateli_id LONG not null primary key,rol_id LONG,sozdal LONG,tip_organizacii_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.polzovateli";
	public static final String ORDER_BY_JPQL = " ORDER BY polzovateli.polzovateli_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.polzovateli.polzovateli_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.polzovateli.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.polzovateli.model.polzovateli"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.polzovateli.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.polzovateli.model.polzovateli"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static polzovateli toModel(polzovateliSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		polzovateli model = new polzovateliImpl();

		model.setAktivnost(soapModel.getAktivnost());
		model.setData_izmenenija(soapModel.getData_izmenenija());
		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setImja_polzovatelja(soapModel.getImja_polzovatelja());
		model.setIzmenil(soapModel.getIzmenil());
		model.setOrganizacija_id(soapModel.getOrganizacija_id());
		model.setParol(soapModel.getParol());
		model.setPodrazdelenije_id(soapModel.getPodrazdelenije_id());
		model.setPolzovateli_id(soapModel.getPolzovateli_id());
		model.setRol_id(soapModel.getRol_id());
		model.setSozdal(soapModel.getSozdal());
		model.setTip_organizacii_id(soapModel.getTip_organizacii_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<polzovateli> toModels(polzovateliSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<polzovateli> models = new ArrayList<polzovateli>(soapModels.length);

		for (polzovateliSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.polzovateli.service.util.ServiceProps.get(
				"lock.expiration.time.tj.polzovateli.model.polzovateli"));

	public polzovateliModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _polzovateli_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPolzovateli_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _polzovateli_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return polzovateli.class;
	}

	@Override
	public String getModelClassName() {
		return polzovateli.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("aktivnost", getAktivnost());
		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("imja_polzovatelja", getImja_polzovatelja());
		attributes.put("izmenil", getIzmenil());
		attributes.put("organizacija_id", getOrganizacija_id());
		attributes.put("parol", getParol());
		attributes.put("podrazdelenije_id", getPodrazdelenije_id());
		attributes.put("polzovateli_id", getPolzovateli_id());
		attributes.put("rol_id", getRol_id());
		attributes.put("sozdal", getSozdal());
		attributes.put("tip_organizacii_id", getTip_organizacii_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long aktivnost = (Long)attributes.get("aktivnost");

		if (aktivnost != null) {
			setAktivnost(aktivnost);
		}

		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		String imja_polzovatelja = (String)attributes.get("imja_polzovatelja");

		if (imja_polzovatelja != null) {
			setImja_polzovatelja(imja_polzovatelja);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Long organizacija_id = (Long)attributes.get("organizacija_id");

		if (organizacija_id != null) {
			setOrganizacija_id(organizacija_id);
		}

		String parol = (String)attributes.get("parol");

		if (parol != null) {
			setParol(parol);
		}

		Long podrazdelenije_id = (Long)attributes.get("podrazdelenije_id");

		if (podrazdelenije_id != null) {
			setPodrazdelenije_id(podrazdelenije_id);
		}

		Long polzovateli_id = (Long)attributes.get("polzovateli_id");

		if (polzovateli_id != null) {
			setPolzovateli_id(polzovateli_id);
		}

		Long rol_id = (Long)attributes.get("rol_id");

		if (rol_id != null) {
			setRol_id(rol_id);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}

		Long tip_organizacii_id = (Long)attributes.get("tip_organizacii_id");

		if (tip_organizacii_id != null) {
			setTip_organizacii_id(tip_organizacii_id);
		}
	}

	@JSON
	@Override
	public long getAktivnost() {
		return _aktivnost;
	}

	@Override
	public void setAktivnost(long aktivnost) {
		_aktivnost = aktivnost;
	}

	@JSON
	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public String getImja_polzovatelja() {
		if (_imja_polzovatelja == null) {
			return StringPool.BLANK;
		}
		else {
			return _imja_polzovatelja;
		}
	}

	@Override
	public void setImja_polzovatelja(String imja_polzovatelja) {
		_imja_polzovatelja = imja_polzovatelja;
	}

	@JSON
	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@JSON
	@Override
	public long getOrganizacija_id() {
		return _organizacija_id;
	}

	@Override
	public void setOrganizacija_id(long organizacija_id) {
		_organizacija_id = organizacija_id;
	}

	@JSON
	@Override
	public String getParol() {
		if (_parol == null) {
			return StringPool.BLANK;
		}
		else {
			return _parol;
		}
	}

	@Override
	public void setParol(String parol) {
		_parol = parol;
	}

	@JSON
	@Override
	public long getPodrazdelenije_id() {
		return _podrazdelenije_id;
	}

	@Override
	public void setPodrazdelenije_id(long podrazdelenije_id) {
		_podrazdelenije_id = podrazdelenije_id;
	}

	@JSON
	@Override
	public long getPolzovateli_id() {
		return _polzovateli_id;
	}

	@Override
	public void setPolzovateli_id(long polzovateli_id) {
		_polzovateli_id = polzovateli_id;
	}

	@JSON
	@Override
	public long getRol_id() {
		return _rol_id;
	}

	@Override
	public void setRol_id(long rol_id) {
		_rol_id = rol_id;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@JSON
	@Override
	public long getTip_organizacii_id() {
		return _tip_organizacii_id;
	}

	@Override
	public void setTip_organizacii_id(long tip_organizacii_id) {
		_tip_organizacii_id = tip_organizacii_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			polzovateli.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public polzovateli toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (polzovateli)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		polzovateliImpl polzovateliImpl = new polzovateliImpl();

		polzovateliImpl.setAktivnost(getAktivnost());
		polzovateliImpl.setData_izmenenija(getData_izmenenija());
		polzovateliImpl.setData_sozdanija(getData_sozdanija());
		polzovateliImpl.setImja_polzovatelja(getImja_polzovatelja());
		polzovateliImpl.setIzmenil(getIzmenil());
		polzovateliImpl.setOrganizacija_id(getOrganizacija_id());
		polzovateliImpl.setParol(getParol());
		polzovateliImpl.setPodrazdelenije_id(getPodrazdelenije_id());
		polzovateliImpl.setPolzovateli_id(getPolzovateli_id());
		polzovateliImpl.setRol_id(getRol_id());
		polzovateliImpl.setSozdal(getSozdal());
		polzovateliImpl.setTip_organizacii_id(getTip_organizacii_id());

		polzovateliImpl.resetOriginalValues();

		return polzovateliImpl;
	}

	@Override
	public int compareTo(polzovateli polzovateli) {
		long primaryKey = polzovateli.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof polzovateli)) {
			return false;
		}

		polzovateli polzovateli = (polzovateli)obj;

		long primaryKey = polzovateli.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<polzovateli> toCacheModel() {
		polzovateliCacheModel polzovateliCacheModel = new polzovateliCacheModel();

		polzovateliCacheModel.aktivnost = getAktivnost();

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			polzovateliCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			polzovateliCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			polzovateliCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			polzovateliCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		polzovateliCacheModel.imja_polzovatelja = getImja_polzovatelja();

		String imja_polzovatelja = polzovateliCacheModel.imja_polzovatelja;

		if ((imja_polzovatelja != null) && (imja_polzovatelja.length() == 0)) {
			polzovateliCacheModel.imja_polzovatelja = null;
		}

		polzovateliCacheModel.izmenil = getIzmenil();

		polzovateliCacheModel.organizacija_id = getOrganizacija_id();

		polzovateliCacheModel.parol = getParol();

		String parol = polzovateliCacheModel.parol;

		if ((parol != null) && (parol.length() == 0)) {
			polzovateliCacheModel.parol = null;
		}

		polzovateliCacheModel.podrazdelenije_id = getPodrazdelenije_id();

		polzovateliCacheModel.polzovateli_id = getPolzovateli_id();

		polzovateliCacheModel.rol_id = getRol_id();

		polzovateliCacheModel.sozdal = getSozdal();

		polzovateliCacheModel.tip_organizacii_id = getTip_organizacii_id();

		return polzovateliCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{aktivnost=");
		sb.append(getAktivnost());
		sb.append(", data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", imja_polzovatelja=");
		sb.append(getImja_polzovatelja());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", organizacija_id=");
		sb.append(getOrganizacija_id());
		sb.append(", parol=");
		sb.append(getParol());
		sb.append(", podrazdelenije_id=");
		sb.append(getPodrazdelenije_id());
		sb.append(", polzovateli_id=");
		sb.append(getPolzovateli_id());
		sb.append(", rol_id=");
		sb.append(getRol_id());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append(", tip_organizacii_id=");
		sb.append(getTip_organizacii_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("tj.polzovateli.model.polzovateli");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>aktivnost</column-name><column-value><![CDATA[");
		sb.append(getAktivnost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imja_polzovatelja</column-name><column-value><![CDATA[");
		sb.append(getImja_polzovatelja());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizacija_id</column-name><column-value><![CDATA[");
		sb.append(getOrganizacija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parol</column-name><column-value><![CDATA[");
		sb.append(getParol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>podrazdelenije_id</column-name><column-value><![CDATA[");
		sb.append(getPodrazdelenije_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>polzovateli_id</column-name><column-value><![CDATA[");
		sb.append(getPolzovateli_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rol_id</column-name><column-value><![CDATA[");
		sb.append(getRol_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tip_organizacii_id</column-name><column-value><![CDATA[");
		sb.append(getTip_organizacii_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = polzovateli.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			polzovateli.class
		};
	private long _aktivnost;
	private Date _data_izmenenija;
	private Date _data_sozdanija;
	private String _imja_polzovatelja;
	private long _izmenil;
	private long _organizacija_id;
	private String _parol;
	private long _podrazdelenije_id;
	private long _polzovateli_id;
	private long _rol_id;
	private long _sozdal;
	private long _tip_organizacii_id;
	private polzovateli _escapedModel;
}