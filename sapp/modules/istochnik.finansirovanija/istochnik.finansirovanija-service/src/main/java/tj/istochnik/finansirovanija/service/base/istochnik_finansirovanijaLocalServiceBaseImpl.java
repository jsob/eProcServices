/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.istochnik.finansirovanija.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.istochnik.finansirovanija.model.istochnik_finansirovanija;
import tj.istochnik.finansirovanija.service.istochnik_finansirovanijaLocalService;
import tj.istochnik.finansirovanija.service.persistence.istochnik_finansirovanijaPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the istochnik_finansirovanija local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.istochnik.finansirovanija.service.impl.istochnik_finansirovanijaLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.istochnik.finansirovanija.service.impl.istochnik_finansirovanijaLocalServiceImpl
 * @see tj.istochnik.finansirovanija.service.istochnik_finansirovanijaLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class istochnik_finansirovanijaLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements istochnik_finansirovanijaLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.istochnik.finansirovanija.service.istochnik_finansirovanijaLocalServiceUtil} to access the istochnik_finansirovanija local service.
	 */

	/**
	 * Adds the istochnik_finansirovanija to the database. Also notifies the appropriate model listeners.
	 *
	 * @param istochnik_finansirovanija the istochnik_finansirovanija
	 * @return the istochnik_finansirovanija that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public istochnik_finansirovanija addistochnik_finansirovanija(
		istochnik_finansirovanija istochnik_finansirovanija) {
		istochnik_finansirovanija.setNew(true);

		return istochnik_finansirovanijaPersistence.update(istochnik_finansirovanija);
	}

	/**
	 * Creates a new istochnik_finansirovanija with the primary key. Does not add the istochnik_finansirovanija to the database.
	 *
	 * @param istochnik_finansirovanija_id the primary key for the new istochnik_finansirovanija
	 * @return the new istochnik_finansirovanija
	 */
	@Override
	public istochnik_finansirovanija createistochnik_finansirovanija(
		long istochnik_finansirovanija_id) {
		return istochnik_finansirovanijaPersistence.create(istochnik_finansirovanija_id);
	}

	/**
	 * Deletes the istochnik_finansirovanija with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param istochnik_finansirovanija_id the primary key of the istochnik_finansirovanija
	 * @return the istochnik_finansirovanija that was removed
	 * @throws PortalException if a istochnik_finansirovanija with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public istochnik_finansirovanija deleteistochnik_finansirovanija(
		long istochnik_finansirovanija_id) throws PortalException {
		return istochnik_finansirovanijaPersistence.remove(istochnik_finansirovanija_id);
	}

	/**
	 * Deletes the istochnik_finansirovanija from the database. Also notifies the appropriate model listeners.
	 *
	 * @param istochnik_finansirovanija the istochnik_finansirovanija
	 * @return the istochnik_finansirovanija that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public istochnik_finansirovanija deleteistochnik_finansirovanija(
		istochnik_finansirovanija istochnik_finansirovanija) {
		return istochnik_finansirovanijaPersistence.remove(istochnik_finansirovanija);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(istochnik_finansirovanija.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return istochnik_finansirovanijaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.istochnik.finansirovanija.model.impl.istochnik_finansirovanijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return istochnik_finansirovanijaPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.istochnik.finansirovanija.model.impl.istochnik_finansirovanijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return istochnik_finansirovanijaPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return istochnik_finansirovanijaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return istochnik_finansirovanijaPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public istochnik_finansirovanija fetchistochnik_finansirovanija(
		long istochnik_finansirovanija_id) {
		return istochnik_finansirovanijaPersistence.fetchByPrimaryKey(istochnik_finansirovanija_id);
	}

	/**
	 * Returns the istochnik_finansirovanija with the primary key.
	 *
	 * @param istochnik_finansirovanija_id the primary key of the istochnik_finansirovanija
	 * @return the istochnik_finansirovanija
	 * @throws PortalException if a istochnik_finansirovanija with the primary key could not be found
	 */
	@Override
	public istochnik_finansirovanija getistochnik_finansirovanija(
		long istochnik_finansirovanija_id) throws PortalException {
		return istochnik_finansirovanijaPersistence.findByPrimaryKey(istochnik_finansirovanija_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(istochnik_finansirovanijaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(istochnik_finansirovanija.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"istochnik_finansirovanija_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(istochnik_finansirovanijaLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(istochnik_finansirovanija.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"istochnik_finansirovanija_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(istochnik_finansirovanijaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(istochnik_finansirovanija.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"istochnik_finansirovanija_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return istochnik_finansirovanijaLocalService.deleteistochnik_finansirovanija((istochnik_finansirovanija)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return istochnik_finansirovanijaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the istochnik_finansirovanijas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.istochnik.finansirovanija.model.impl.istochnik_finansirovanijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of istochnik_finansirovanijas
	 * @param end the upper bound of the range of istochnik_finansirovanijas (not inclusive)
	 * @return the range of istochnik_finansirovanijas
	 */
	@Override
	public List<istochnik_finansirovanija> getistochnik_finansirovanijas(
		int start, int end) {
		return istochnik_finansirovanijaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of istochnik_finansirovanijas.
	 *
	 * @return the number of istochnik_finansirovanijas
	 */
	@Override
	public int getistochnik_finansirovanijasCount() {
		return istochnik_finansirovanijaPersistence.countAll();
	}

	/**
	 * Updates the istochnik_finansirovanija in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param istochnik_finansirovanija the istochnik_finansirovanija
	 * @return the istochnik_finansirovanija that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public istochnik_finansirovanija updateistochnik_finansirovanija(
		istochnik_finansirovanija istochnik_finansirovanija) {
		return istochnik_finansirovanijaPersistence.update(istochnik_finansirovanija);
	}

	/**
	 * Returns the istochnik_finansirovanija local service.
	 *
	 * @return the istochnik_finansirovanija local service
	 */
	public istochnik_finansirovanijaLocalService getistochnik_finansirovanijaLocalService() {
		return istochnik_finansirovanijaLocalService;
	}

	/**
	 * Sets the istochnik_finansirovanija local service.
	 *
	 * @param istochnik_finansirovanijaLocalService the istochnik_finansirovanija local service
	 */
	public void setistochnik_finansirovanijaLocalService(
		istochnik_finansirovanijaLocalService istochnik_finansirovanijaLocalService) {
		this.istochnik_finansirovanijaLocalService = istochnik_finansirovanijaLocalService;
	}

	/**
	 * Returns the istochnik_finansirovanija persistence.
	 *
	 * @return the istochnik_finansirovanija persistence
	 */
	public istochnik_finansirovanijaPersistence getistochnik_finansirovanijaPersistence() {
		return istochnik_finansirovanijaPersistence;
	}

	/**
	 * Sets the istochnik_finansirovanija persistence.
	 *
	 * @param istochnik_finansirovanijaPersistence the istochnik_finansirovanija persistence
	 */
	public void setistochnik_finansirovanijaPersistence(
		istochnik_finansirovanijaPersistence istochnik_finansirovanijaPersistence) {
		this.istochnik_finansirovanijaPersistence = istochnik_finansirovanijaPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.istochnik.finansirovanija.model.istochnik_finansirovanija",
			istochnik_finansirovanijaLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.istochnik.finansirovanija.model.istochnik_finansirovanija");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return istochnik_finansirovanijaLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return istochnik_finansirovanija.class;
	}

	protected String getModelClassName() {
		return istochnik_finansirovanija.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = istochnik_finansirovanijaPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = istochnik_finansirovanijaLocalService.class)
	protected istochnik_finansirovanijaLocalService istochnik_finansirovanijaLocalService;
	@BeanReference(type = istochnik_finansirovanijaPersistence.class)
	protected istochnik_finansirovanijaPersistence istochnik_finansirovanijaPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}