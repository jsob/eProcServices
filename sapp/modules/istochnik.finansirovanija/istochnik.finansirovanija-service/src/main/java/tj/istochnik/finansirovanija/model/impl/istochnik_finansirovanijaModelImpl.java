/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.istochnik.finansirovanija.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.istochnik.finansirovanija.model.istochnik_finansirovanija;
import tj.istochnik.finansirovanija.model.istochnik_finansirovanijaModel;
import tj.istochnik.finansirovanija.model.istochnik_finansirovanijaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the istochnik_finansirovanija service. Represents a row in the &quot;sapp.istochnik_finansirovanija&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link istochnik_finansirovanijaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link istochnik_finansirovanijaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see istochnik_finansirovanijaImpl
 * @see istochnik_finansirovanija
 * @see istochnik_finansirovanijaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class istochnik_finansirovanijaModelImpl extends BaseModelImpl<istochnik_finansirovanija>
	implements istochnik_finansirovanijaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a istochnik_finansirovanija model instance should use the {@link istochnik_finansirovanija} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.istochnik_finansirovanija";
	public static final Object[][] TABLE_COLUMNS = {
			{ "istochnik_finansirovanija_id", Types.BIGINT },
			{ "naimenovanie", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("istochnik_finansirovanija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("naimenovanie", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.istochnik_finansirovanija (istochnik_finansirovanija_id LONG not null primary key,naimenovanie VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.istochnik_finansirovanija";
	public static final String ORDER_BY_JPQL = " ORDER BY istochnik_finansirovanija.istochnik_finansirovanija_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.istochnik_finansirovanija.istochnik_finansirovanija_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.istochnik.finansirovanija.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.istochnik.finansirovanija.model.istochnik_finansirovanija"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.istochnik.finansirovanija.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.istochnik.finansirovanija.model.istochnik_finansirovanija"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static istochnik_finansirovanija toModel(
		istochnik_finansirovanijaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		istochnik_finansirovanija model = new istochnik_finansirovanijaImpl();

		model.setIstochnik_finansirovanija_id(soapModel.getIstochnik_finansirovanija_id());
		model.setNaimenovanie(soapModel.getNaimenovanie());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<istochnik_finansirovanija> toModels(
		istochnik_finansirovanijaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<istochnik_finansirovanija> models = new ArrayList<istochnik_finansirovanija>(soapModels.length);

		for (istochnik_finansirovanijaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.istochnik.finansirovanija.service.util.ServiceProps.get(
				"lock.expiration.time.tj.istochnik.finansirovanija.model.istochnik_finansirovanija"));

	public istochnik_finansirovanijaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _istochnik_finansirovanija_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIstochnik_finansirovanija_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _istochnik_finansirovanija_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return istochnik_finansirovanija.class;
	}

	@Override
	public String getModelClassName() {
		return istochnik_finansirovanija.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("istochnik_finansirovanija_id",
			getIstochnik_finansirovanija_id());
		attributes.put("naimenovanie", getNaimenovanie());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long istochnik_finansirovanija_id = (Long)attributes.get(
				"istochnik_finansirovanija_id");

		if (istochnik_finansirovanija_id != null) {
			setIstochnik_finansirovanija_id(istochnik_finansirovanija_id);
		}

		String naimenovanie = (String)attributes.get("naimenovanie");

		if (naimenovanie != null) {
			setNaimenovanie(naimenovanie);
		}
	}

	@JSON
	@Override
	public long getIstochnik_finansirovanija_id() {
		return _istochnik_finansirovanija_id;
	}

	@Override
	public void setIstochnik_finansirovanija_id(
		long istochnik_finansirovanija_id) {
		_istochnik_finansirovanija_id = istochnik_finansirovanija_id;
	}

	@JSON
	@Override
	public String getNaimenovanie() {
		if (_naimenovanie == null) {
			return StringPool.BLANK;
		}
		else {
			return _naimenovanie;
		}
	}

	@Override
	public void setNaimenovanie(String naimenovanie) {
		_naimenovanie = naimenovanie;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			istochnik_finansirovanija.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public istochnik_finansirovanija toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (istochnik_finansirovanija)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		istochnik_finansirovanijaImpl istochnik_finansirovanijaImpl = new istochnik_finansirovanijaImpl();

		istochnik_finansirovanijaImpl.setIstochnik_finansirovanija_id(getIstochnik_finansirovanija_id());
		istochnik_finansirovanijaImpl.setNaimenovanie(getNaimenovanie());

		istochnik_finansirovanijaImpl.resetOriginalValues();

		return istochnik_finansirovanijaImpl;
	}

	@Override
	public int compareTo(istochnik_finansirovanija istochnik_finansirovanija) {
		long primaryKey = istochnik_finansirovanija.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof istochnik_finansirovanija)) {
			return false;
		}

		istochnik_finansirovanija istochnik_finansirovanija = (istochnik_finansirovanija)obj;

		long primaryKey = istochnik_finansirovanija.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<istochnik_finansirovanija> toCacheModel() {
		istochnik_finansirovanijaCacheModel istochnik_finansirovanijaCacheModel = new istochnik_finansirovanijaCacheModel();

		istochnik_finansirovanijaCacheModel.istochnik_finansirovanija_id = getIstochnik_finansirovanija_id();

		istochnik_finansirovanijaCacheModel.naimenovanie = getNaimenovanie();

		String naimenovanie = istochnik_finansirovanijaCacheModel.naimenovanie;

		if ((naimenovanie != null) && (naimenovanie.length() == 0)) {
			istochnik_finansirovanijaCacheModel.naimenovanie = null;
		}

		return istochnik_finansirovanijaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{istochnik_finansirovanija_id=");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append(", naimenovanie=");
		sb.append(getNaimenovanie());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append(
			"tj.istochnik.finansirovanija.model.istochnik_finansirovanija");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>istochnik_finansirovanija_id</column-name><column-value><![CDATA[");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naimenovanie</column-name><column-value><![CDATA[");
		sb.append(getNaimenovanie());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = istochnik_finansirovanija.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			istochnik_finansirovanija.class
		};
	private long _istochnik_finansirovanija_id;
	private String _naimenovanie;
	private istochnik_finansirovanija _escapedModel;
}