/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.protokol.dlja.zakljuchenija.kontrakta.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.protokol.dlja.zakljuchenija.kontrakta.model.protokol_dlja_zakljuchenija_kontrakta;
import tj.protokol.dlja.zakljuchenija.kontrakta.model.protokol_dlja_zakljuchenija_kontraktaModel;
import tj.protokol.dlja.zakljuchenija.kontrakta.model.protokol_dlja_zakljuchenija_kontraktaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the protokol_dlja_zakljuchenija_kontrakta service. Represents a row in the &quot;sapp.protokol_dlja_zakljuchenija_kontrakta&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link protokol_dlja_zakljuchenija_kontraktaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link protokol_dlja_zakljuchenija_kontraktaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see protokol_dlja_zakljuchenija_kontraktaImpl
 * @see protokol_dlja_zakljuchenija_kontrakta
 * @see protokol_dlja_zakljuchenija_kontraktaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class protokol_dlja_zakljuchenija_kontraktaModelImpl
	extends BaseModelImpl<protokol_dlja_zakljuchenija_kontrakta>
	implements protokol_dlja_zakljuchenija_kontraktaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a protokol_dlja_zakljuchenija_kontrakta model instance should use the {@link protokol_dlja_zakljuchenija_kontrakta} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.protokol_dlja_zakljuchenija_kontrakta";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_generacii", Types.TIMESTAMP },
			{ "izvewenie_id", Types.BIGINT },
			{ "protokol_dlja_zakljuchenija_kontrakta_id", Types.BIGINT },
			{ "sgeneriroval", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_generacii", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("protokol_dlja_zakljuchenija_kontrakta_id",
			Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sgeneriroval", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.protokol_dlja_zakljuchenija_kontrakta (data_generacii DATE null,izvewenie_id LONG,protokol_dlja_zakljuchenija_kontrakta_id LONG not null primary key,sgeneriroval LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.protokol_dlja_zakljuchenija_kontrakta";
	public static final String ORDER_BY_JPQL = " ORDER BY protokol_dlja_zakljuchenija_kontrakta.protokol_dlja_zakljuchenija_kontrakta_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.protokol_dlja_zakljuchenija_kontrakta.protokol_dlja_zakljuchenija_kontrakta_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.protokol.dlja.zakljuchenija.kontrakta.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.protokol.dlja.zakljuchenija.kontrakta.model.protokol_dlja_zakljuchenija_kontrakta"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.protokol.dlja.zakljuchenija.kontrakta.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.protokol.dlja.zakljuchenija.kontrakta.model.protokol_dlja_zakljuchenija_kontrakta"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static protokol_dlja_zakljuchenija_kontrakta toModel(
		protokol_dlja_zakljuchenija_kontraktaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		protokol_dlja_zakljuchenija_kontrakta model = new protokol_dlja_zakljuchenija_kontraktaImpl();

		model.setData_generacii(soapModel.getData_generacii());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setProtokol_dlja_zakljuchenija_kontrakta_id(soapModel.getProtokol_dlja_zakljuchenija_kontrakta_id());
		model.setSgeneriroval(soapModel.getSgeneriroval());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<protokol_dlja_zakljuchenija_kontrakta> toModels(
		protokol_dlja_zakljuchenija_kontraktaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<protokol_dlja_zakljuchenija_kontrakta> models = new ArrayList<protokol_dlja_zakljuchenija_kontrakta>(soapModels.length);

		for (protokol_dlja_zakljuchenija_kontraktaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.protokol.dlja.zakljuchenija.kontrakta.service.util.ServiceProps.get(
				"lock.expiration.time.tj.protokol.dlja.zakljuchenija.kontrakta.model.protokol_dlja_zakljuchenija_kontrakta"));

	public protokol_dlja_zakljuchenija_kontraktaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _protokol_dlja_zakljuchenija_kontrakta_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProtokol_dlja_zakljuchenija_kontrakta_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _protokol_dlja_zakljuchenija_kontrakta_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return protokol_dlja_zakljuchenija_kontrakta.class;
	}

	@Override
	public String getModelClassName() {
		return protokol_dlja_zakljuchenija_kontrakta.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_generacii", getData_generacii());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("protokol_dlja_zakljuchenija_kontrakta_id",
			getProtokol_dlja_zakljuchenija_kontrakta_id());
		attributes.put("sgeneriroval", getSgeneriroval());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_generacii = (Date)attributes.get("data_generacii");

		if (data_generacii != null) {
			setData_generacii(data_generacii);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		Long protokol_dlja_zakljuchenija_kontrakta_id = (Long)attributes.get(
				"protokol_dlja_zakljuchenija_kontrakta_id");

		if (protokol_dlja_zakljuchenija_kontrakta_id != null) {
			setProtokol_dlja_zakljuchenija_kontrakta_id(protokol_dlja_zakljuchenija_kontrakta_id);
		}

		Long sgeneriroval = (Long)attributes.get("sgeneriroval");

		if (sgeneriroval != null) {
			setSgeneriroval(sgeneriroval);
		}
	}

	@JSON
	@Override
	public Date getData_generacii() {
		return _data_generacii;
	}

	@Override
	public void setData_generacii(Date data_generacii) {
		_data_generacii = data_generacii;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public long getProtokol_dlja_zakljuchenija_kontrakta_id() {
		return _protokol_dlja_zakljuchenija_kontrakta_id;
	}

	@Override
	public void setProtokol_dlja_zakljuchenija_kontrakta_id(
		long protokol_dlja_zakljuchenija_kontrakta_id) {
		_protokol_dlja_zakljuchenija_kontrakta_id = protokol_dlja_zakljuchenija_kontrakta_id;
	}

	@JSON
	@Override
	public long getSgeneriroval() {
		return _sgeneriroval;
	}

	@Override
	public void setSgeneriroval(long sgeneriroval) {
		_sgeneriroval = sgeneriroval;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			protokol_dlja_zakljuchenija_kontrakta.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public protokol_dlja_zakljuchenija_kontrakta toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (protokol_dlja_zakljuchenija_kontrakta)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		protokol_dlja_zakljuchenija_kontraktaImpl protokol_dlja_zakljuchenija_kontraktaImpl =
			new protokol_dlja_zakljuchenija_kontraktaImpl();

		protokol_dlja_zakljuchenija_kontraktaImpl.setData_generacii(getData_generacii());
		protokol_dlja_zakljuchenija_kontraktaImpl.setIzvewenie_id(getIzvewenie_id());
		protokol_dlja_zakljuchenija_kontraktaImpl.setProtokol_dlja_zakljuchenija_kontrakta_id(getProtokol_dlja_zakljuchenija_kontrakta_id());
		protokol_dlja_zakljuchenija_kontraktaImpl.setSgeneriroval(getSgeneriroval());

		protokol_dlja_zakljuchenija_kontraktaImpl.resetOriginalValues();

		return protokol_dlja_zakljuchenija_kontraktaImpl;
	}

	@Override
	public int compareTo(
		protokol_dlja_zakljuchenija_kontrakta protokol_dlja_zakljuchenija_kontrakta) {
		long primaryKey = protokol_dlja_zakljuchenija_kontrakta.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof protokol_dlja_zakljuchenija_kontrakta)) {
			return false;
		}

		protokol_dlja_zakljuchenija_kontrakta protokol_dlja_zakljuchenija_kontrakta =
			(protokol_dlja_zakljuchenija_kontrakta)obj;

		long primaryKey = protokol_dlja_zakljuchenija_kontrakta.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<protokol_dlja_zakljuchenija_kontrakta> toCacheModel() {
		protokol_dlja_zakljuchenija_kontraktaCacheModel protokol_dlja_zakljuchenija_kontraktaCacheModel =
			new protokol_dlja_zakljuchenija_kontraktaCacheModel();

		Date data_generacii = getData_generacii();

		if (data_generacii != null) {
			protokol_dlja_zakljuchenija_kontraktaCacheModel.data_generacii = data_generacii.getTime();
		}
		else {
			protokol_dlja_zakljuchenija_kontraktaCacheModel.data_generacii = Long.MIN_VALUE;
		}

		protokol_dlja_zakljuchenija_kontraktaCacheModel.izvewenie_id = getIzvewenie_id();

		protokol_dlja_zakljuchenija_kontraktaCacheModel.protokol_dlja_zakljuchenija_kontrakta_id = getProtokol_dlja_zakljuchenija_kontrakta_id();

		protokol_dlja_zakljuchenija_kontraktaCacheModel.sgeneriroval = getSgeneriroval();

		return protokol_dlja_zakljuchenija_kontraktaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{data_generacii=");
		sb.append(getData_generacii());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", protokol_dlja_zakljuchenija_kontrakta_id=");
		sb.append(getProtokol_dlja_zakljuchenija_kontrakta_id());
		sb.append(", sgeneriroval=");
		sb.append(getSgeneriroval());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"tj.protokol.dlja.zakljuchenija.kontrakta.model.protokol_dlja_zakljuchenija_kontrakta");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_generacii</column-name><column-value><![CDATA[");
		sb.append(getData_generacii());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>protokol_dlja_zakljuchenija_kontrakta_id</column-name><column-value><![CDATA[");
		sb.append(getProtokol_dlja_zakljuchenija_kontrakta_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sgeneriroval</column-name><column-value><![CDATA[");
		sb.append(getSgeneriroval());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = protokol_dlja_zakljuchenija_kontrakta.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			protokol_dlja_zakljuchenija_kontrakta.class
		};
	private Date _data_generacii;
	private long _izvewenie_id;
	private long _protokol_dlja_zakljuchenija_kontrakta_id;
	private long _sgeneriroval;
	private protokol_dlja_zakljuchenija_kontrakta _escapedModel;
}