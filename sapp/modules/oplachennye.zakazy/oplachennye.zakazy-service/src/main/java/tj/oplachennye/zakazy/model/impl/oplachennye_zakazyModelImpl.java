/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.oplachennye.zakazy.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.oplachennye.zakazy.model.oplachennye_zakazy;
import tj.oplachennye.zakazy.model.oplachennye_zakazyModel;
import tj.oplachennye.zakazy.model.oplachennye_zakazySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the oplachennye_zakazy service. Represents a row in the &quot;sapp.oplachennye_zakazy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link oplachennye_zakazyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link oplachennye_zakazyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see oplachennye_zakazyImpl
 * @see oplachennye_zakazy
 * @see oplachennye_zakazyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class oplachennye_zakazyModelImpl extends BaseModelImpl<oplachennye_zakazy>
	implements oplachennye_zakazyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a oplachennye_zakazy model instance should use the {@link oplachennye_zakazy} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.oplachennye_zakazy";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_oplaty", Types.TIMESTAMP },
			{ "izvewenie_id", Types.BIGINT },
			{ "oplachennye_zakazy_id", Types.BIGINT },
			{ "oplatil", Types.BIGINT },
			{ "postavwik_id", Types.BIGINT },
			{ "summa", Types.DOUBLE },
			{ "tranzakcija", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_oplaty", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("oplachennye_zakazy_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("oplatil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postavwik_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("summa", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("tranzakcija", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.oplachennye_zakazy (data_oplaty DATE null,izvewenie_id LONG,oplachennye_zakazy_id LONG not null primary key,oplatil LONG,postavwik_id LONG,summa DOUBLE,tranzakcija VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.oplachennye_zakazy";
	public static final String ORDER_BY_JPQL = " ORDER BY oplachennye_zakazy.oplachennye_zakazy_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.oplachennye_zakazy.oplachennye_zakazy_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.oplachennye.zakazy.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.oplachennye.zakazy.model.oplachennye_zakazy"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.oplachennye.zakazy.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.oplachennye.zakazy.model.oplachennye_zakazy"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static oplachennye_zakazy toModel(oplachennye_zakazySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		oplachennye_zakazy model = new oplachennye_zakazyImpl();

		model.setData_oplaty(soapModel.getData_oplaty());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setOplachennye_zakazy_id(soapModel.getOplachennye_zakazy_id());
		model.setOplatil(soapModel.getOplatil());
		model.setPostavwik_id(soapModel.getPostavwik_id());
		model.setSumma(soapModel.getSumma());
		model.setTranzakcija(soapModel.getTranzakcija());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<oplachennye_zakazy> toModels(
		oplachennye_zakazySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<oplachennye_zakazy> models = new ArrayList<oplachennye_zakazy>(soapModels.length);

		for (oplachennye_zakazySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.oplachennye.zakazy.service.util.ServiceProps.get(
				"lock.expiration.time.tj.oplachennye.zakazy.model.oplachennye_zakazy"));

	public oplachennye_zakazyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _oplachennye_zakazy_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOplachennye_zakazy_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oplachennye_zakazy_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return oplachennye_zakazy.class;
	}

	@Override
	public String getModelClassName() {
		return oplachennye_zakazy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_oplaty", getData_oplaty());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("oplachennye_zakazy_id", getOplachennye_zakazy_id());
		attributes.put("oplatil", getOplatil());
		attributes.put("postavwik_id", getPostavwik_id());
		attributes.put("summa", getSumma());
		attributes.put("tranzakcija", getTranzakcija());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_oplaty = (Date)attributes.get("data_oplaty");

		if (data_oplaty != null) {
			setData_oplaty(data_oplaty);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		Long oplachennye_zakazy_id = (Long)attributes.get(
				"oplachennye_zakazy_id");

		if (oplachennye_zakazy_id != null) {
			setOplachennye_zakazy_id(oplachennye_zakazy_id);
		}

		Long oplatil = (Long)attributes.get("oplatil");

		if (oplatil != null) {
			setOplatil(oplatil);
		}

		Long postavwik_id = (Long)attributes.get("postavwik_id");

		if (postavwik_id != null) {
			setPostavwik_id(postavwik_id);
		}

		Double summa = (Double)attributes.get("summa");

		if (summa != null) {
			setSumma(summa);
		}

		String tranzakcija = (String)attributes.get("tranzakcija");

		if (tranzakcija != null) {
			setTranzakcija(tranzakcija);
		}
	}

	@JSON
	@Override
	public Date getData_oplaty() {
		return _data_oplaty;
	}

	@Override
	public void setData_oplaty(Date data_oplaty) {
		_data_oplaty = data_oplaty;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public long getOplachennye_zakazy_id() {
		return _oplachennye_zakazy_id;
	}

	@Override
	public void setOplachennye_zakazy_id(long oplachennye_zakazy_id) {
		_oplachennye_zakazy_id = oplachennye_zakazy_id;
	}

	@JSON
	@Override
	public long getOplatil() {
		return _oplatil;
	}

	@Override
	public void setOplatil(long oplatil) {
		_oplatil = oplatil;
	}

	@JSON
	@Override
	public long getPostavwik_id() {
		return _postavwik_id;
	}

	@Override
	public void setPostavwik_id(long postavwik_id) {
		_postavwik_id = postavwik_id;
	}

	@JSON
	@Override
	public double getSumma() {
		return _summa;
	}

	@Override
	public void setSumma(double summa) {
		_summa = summa;
	}

	@JSON
	@Override
	public String getTranzakcija() {
		if (_tranzakcija == null) {
			return StringPool.BLANK;
		}
		else {
			return _tranzakcija;
		}
	}

	@Override
	public void setTranzakcija(String tranzakcija) {
		_tranzakcija = tranzakcija;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			oplachennye_zakazy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public oplachennye_zakazy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (oplachennye_zakazy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		oplachennye_zakazyImpl oplachennye_zakazyImpl = new oplachennye_zakazyImpl();

		oplachennye_zakazyImpl.setData_oplaty(getData_oplaty());
		oplachennye_zakazyImpl.setIzvewenie_id(getIzvewenie_id());
		oplachennye_zakazyImpl.setOplachennye_zakazy_id(getOplachennye_zakazy_id());
		oplachennye_zakazyImpl.setOplatil(getOplatil());
		oplachennye_zakazyImpl.setPostavwik_id(getPostavwik_id());
		oplachennye_zakazyImpl.setSumma(getSumma());
		oplachennye_zakazyImpl.setTranzakcija(getTranzakcija());

		oplachennye_zakazyImpl.resetOriginalValues();

		return oplachennye_zakazyImpl;
	}

	@Override
	public int compareTo(oplachennye_zakazy oplachennye_zakazy) {
		long primaryKey = oplachennye_zakazy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof oplachennye_zakazy)) {
			return false;
		}

		oplachennye_zakazy oplachennye_zakazy = (oplachennye_zakazy)obj;

		long primaryKey = oplachennye_zakazy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<oplachennye_zakazy> toCacheModel() {
		oplachennye_zakazyCacheModel oplachennye_zakazyCacheModel = new oplachennye_zakazyCacheModel();

		Date data_oplaty = getData_oplaty();

		if (data_oplaty != null) {
			oplachennye_zakazyCacheModel.data_oplaty = data_oplaty.getTime();
		}
		else {
			oplachennye_zakazyCacheModel.data_oplaty = Long.MIN_VALUE;
		}

		oplachennye_zakazyCacheModel.izvewenie_id = getIzvewenie_id();

		oplachennye_zakazyCacheModel.oplachennye_zakazy_id = getOplachennye_zakazy_id();

		oplachennye_zakazyCacheModel.oplatil = getOplatil();

		oplachennye_zakazyCacheModel.postavwik_id = getPostavwik_id();

		oplachennye_zakazyCacheModel.summa = getSumma();

		oplachennye_zakazyCacheModel.tranzakcija = getTranzakcija();

		String tranzakcija = oplachennye_zakazyCacheModel.tranzakcija;

		if ((tranzakcija != null) && (tranzakcija.length() == 0)) {
			oplachennye_zakazyCacheModel.tranzakcija = null;
		}

		return oplachennye_zakazyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{data_oplaty=");
		sb.append(getData_oplaty());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", oplachennye_zakazy_id=");
		sb.append(getOplachennye_zakazy_id());
		sb.append(", oplatil=");
		sb.append(getOplatil());
		sb.append(", postavwik_id=");
		sb.append(getPostavwik_id());
		sb.append(", summa=");
		sb.append(getSumma());
		sb.append(", tranzakcija=");
		sb.append(getTranzakcija());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("tj.oplachennye.zakazy.model.oplachennye_zakazy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_oplaty</column-name><column-value><![CDATA[");
		sb.append(getData_oplaty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oplachennye_zakazy_id</column-name><column-value><![CDATA[");
		sb.append(getOplachennye_zakazy_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oplatil</column-name><column-value><![CDATA[");
		sb.append(getOplatil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postavwik_id</column-name><column-value><![CDATA[");
		sb.append(getPostavwik_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summa</column-name><column-value><![CDATA[");
		sb.append(getSumma());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tranzakcija</column-name><column-value><![CDATA[");
		sb.append(getTranzakcija());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = oplachennye_zakazy.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			oplachennye_zakazy.class
		};
	private Date _data_oplaty;
	private long _izvewenie_id;
	private long _oplachennye_zakazy_id;
	private long _oplatil;
	private long _postavwik_id;
	private double _summa;
	private String _tranzakcija;
	private oplachennye_zakazy _escapedModel;
}