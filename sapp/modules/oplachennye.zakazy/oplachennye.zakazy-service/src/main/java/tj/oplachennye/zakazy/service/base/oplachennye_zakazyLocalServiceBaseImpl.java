/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.oplachennye.zakazy.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.oplachennye.zakazy.model.oplachennye_zakazy;
import tj.oplachennye.zakazy.service.oplachennye_zakazyLocalService;
import tj.oplachennye.zakazy.service.persistence.oplachennye_zakazyPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the oplachennye_zakazy local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.oplachennye.zakazy.service.impl.oplachennye_zakazyLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.oplachennye.zakazy.service.impl.oplachennye_zakazyLocalServiceImpl
 * @see tj.oplachennye.zakazy.service.oplachennye_zakazyLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class oplachennye_zakazyLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements oplachennye_zakazyLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.oplachennye.zakazy.service.oplachennye_zakazyLocalServiceUtil} to access the oplachennye_zakazy local service.
	 */

	/**
	 * Adds the oplachennye_zakazy to the database. Also notifies the appropriate model listeners.
	 *
	 * @param oplachennye_zakazy the oplachennye_zakazy
	 * @return the oplachennye_zakazy that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public oplachennye_zakazy addoplachennye_zakazy(
		oplachennye_zakazy oplachennye_zakazy) {
		oplachennye_zakazy.setNew(true);

		return oplachennye_zakazyPersistence.update(oplachennye_zakazy);
	}

	/**
	 * Creates a new oplachennye_zakazy with the primary key. Does not add the oplachennye_zakazy to the database.
	 *
	 * @param oplachennye_zakazy_id the primary key for the new oplachennye_zakazy
	 * @return the new oplachennye_zakazy
	 */
	@Override
	public oplachennye_zakazy createoplachennye_zakazy(
		long oplachennye_zakazy_id) {
		return oplachennye_zakazyPersistence.create(oplachennye_zakazy_id);
	}

	/**
	 * Deletes the oplachennye_zakazy with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param oplachennye_zakazy_id the primary key of the oplachennye_zakazy
	 * @return the oplachennye_zakazy that was removed
	 * @throws PortalException if a oplachennye_zakazy with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public oplachennye_zakazy deleteoplachennye_zakazy(
		long oplachennye_zakazy_id) throws PortalException {
		return oplachennye_zakazyPersistence.remove(oplachennye_zakazy_id);
	}

	/**
	 * Deletes the oplachennye_zakazy from the database. Also notifies the appropriate model listeners.
	 *
	 * @param oplachennye_zakazy the oplachennye_zakazy
	 * @return the oplachennye_zakazy that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public oplachennye_zakazy deleteoplachennye_zakazy(
		oplachennye_zakazy oplachennye_zakazy) {
		return oplachennye_zakazyPersistence.remove(oplachennye_zakazy);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(oplachennye_zakazy.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return oplachennye_zakazyPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.oplachennye.zakazy.model.impl.oplachennye_zakazyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return oplachennye_zakazyPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.oplachennye.zakazy.model.impl.oplachennye_zakazyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return oplachennye_zakazyPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return oplachennye_zakazyPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return oplachennye_zakazyPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public oplachennye_zakazy fetchoplachennye_zakazy(
		long oplachennye_zakazy_id) {
		return oplachennye_zakazyPersistence.fetchByPrimaryKey(oplachennye_zakazy_id);
	}

	/**
	 * Returns the oplachennye_zakazy with the primary key.
	 *
	 * @param oplachennye_zakazy_id the primary key of the oplachennye_zakazy
	 * @return the oplachennye_zakazy
	 * @throws PortalException if a oplachennye_zakazy with the primary key could not be found
	 */
	@Override
	public oplachennye_zakazy getoplachennye_zakazy(long oplachennye_zakazy_id)
		throws PortalException {
		return oplachennye_zakazyPersistence.findByPrimaryKey(oplachennye_zakazy_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(oplachennye_zakazyLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(oplachennye_zakazy.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"oplachennye_zakazy_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(oplachennye_zakazyLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(oplachennye_zakazy.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"oplachennye_zakazy_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(oplachennye_zakazyLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(oplachennye_zakazy.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"oplachennye_zakazy_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return oplachennye_zakazyLocalService.deleteoplachennye_zakazy((oplachennye_zakazy)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return oplachennye_zakazyPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the oplachennye_zakazies.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.oplachennye.zakazy.model.impl.oplachennye_zakazyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of oplachennye_zakazies
	 * @param end the upper bound of the range of oplachennye_zakazies (not inclusive)
	 * @return the range of oplachennye_zakazies
	 */
	@Override
	public List<oplachennye_zakazy> getoplachennye_zakazies(int start, int end) {
		return oplachennye_zakazyPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of oplachennye_zakazies.
	 *
	 * @return the number of oplachennye_zakazies
	 */
	@Override
	public int getoplachennye_zakaziesCount() {
		return oplachennye_zakazyPersistence.countAll();
	}

	/**
	 * Updates the oplachennye_zakazy in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param oplachennye_zakazy the oplachennye_zakazy
	 * @return the oplachennye_zakazy that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public oplachennye_zakazy updateoplachennye_zakazy(
		oplachennye_zakazy oplachennye_zakazy) {
		return oplachennye_zakazyPersistence.update(oplachennye_zakazy);
	}

	/**
	 * Returns the oplachennye_zakazy local service.
	 *
	 * @return the oplachennye_zakazy local service
	 */
	public oplachennye_zakazyLocalService getoplachennye_zakazyLocalService() {
		return oplachennye_zakazyLocalService;
	}

	/**
	 * Sets the oplachennye_zakazy local service.
	 *
	 * @param oplachennye_zakazyLocalService the oplachennye_zakazy local service
	 */
	public void setoplachennye_zakazyLocalService(
		oplachennye_zakazyLocalService oplachennye_zakazyLocalService) {
		this.oplachennye_zakazyLocalService = oplachennye_zakazyLocalService;
	}

	/**
	 * Returns the oplachennye_zakazy persistence.
	 *
	 * @return the oplachennye_zakazy persistence
	 */
	public oplachennye_zakazyPersistence getoplachennye_zakazyPersistence() {
		return oplachennye_zakazyPersistence;
	}

	/**
	 * Sets the oplachennye_zakazy persistence.
	 *
	 * @param oplachennye_zakazyPersistence the oplachennye_zakazy persistence
	 */
	public void setoplachennye_zakazyPersistence(
		oplachennye_zakazyPersistence oplachennye_zakazyPersistence) {
		this.oplachennye_zakazyPersistence = oplachennye_zakazyPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.oplachennye.zakazy.model.oplachennye_zakazy",
			oplachennye_zakazyLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.oplachennye.zakazy.model.oplachennye_zakazy");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return oplachennye_zakazyLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return oplachennye_zakazy.class;
	}

	protected String getModelClassName() {
		return oplachennye_zakazy.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = oplachennye_zakazyPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = oplachennye_zakazyLocalService.class)
	protected oplachennye_zakazyLocalService oplachennye_zakazyLocalService;
	@BeanReference(type = oplachennye_zakazyPersistence.class)
	protected oplachennye_zakazyPersistence oplachennye_zakazyPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}