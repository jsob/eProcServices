/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.ne.sostojavshiesja.zakazy.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.ne.sostojavshiesja.zakazy.model.ne_sostojavshiesja_zakazy;
import tj.ne.sostojavshiesja.zakazy.model.ne_sostojavshiesja_zakazyModel;
import tj.ne.sostojavshiesja.zakazy.model.ne_sostojavshiesja_zakazySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ne_sostojavshiesja_zakazy service. Represents a row in the &quot;sapp.ne_sostojavshiesja_zakazy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ne_sostojavshiesja_zakazyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ne_sostojavshiesja_zakazyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ne_sostojavshiesja_zakazyImpl
 * @see ne_sostojavshiesja_zakazy
 * @see ne_sostojavshiesja_zakazyModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ne_sostojavshiesja_zakazyModelImpl extends BaseModelImpl<ne_sostojavshiesja_zakazy>
	implements ne_sostojavshiesja_zakazyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ne_sostojavshiesja_zakazy model instance should use the {@link ne_sostojavshiesja_zakazy} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.ne_sostojavshiesja_zakazy";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "izvewenie_id", Types.BIGINT },
			{ "ne_sostojavshiesja_zakazy_id", Types.BIGINT },
			{ "prichina", Types.VARCHAR },
			{ "sozdal", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ne_sostojavshiesja_zakazy_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("prichina", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.ne_sostojavshiesja_zakazy (data_sozdanija DATE null,izvewenie_id LONG,ne_sostojavshiesja_zakazy_id LONG not null primary key,prichina VARCHAR(75) null,sozdal LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.ne_sostojavshiesja_zakazy";
	public static final String ORDER_BY_JPQL = " ORDER BY ne_sostojavshiesja_zakazy.ne_sostojavshiesja_zakazy_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.ne_sostojavshiesja_zakazy.ne_sostojavshiesja_zakazy_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.ne.sostojavshiesja.zakazy.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.ne.sostojavshiesja.zakazy.model.ne_sostojavshiesja_zakazy"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.ne.sostojavshiesja.zakazy.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.ne.sostojavshiesja.zakazy.model.ne_sostojavshiesja_zakazy"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ne_sostojavshiesja_zakazy toModel(
		ne_sostojavshiesja_zakazySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ne_sostojavshiesja_zakazy model = new ne_sostojavshiesja_zakazyImpl();

		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setNe_sostojavshiesja_zakazy_id(soapModel.getNe_sostojavshiesja_zakazy_id());
		model.setPrichina(soapModel.getPrichina());
		model.setSozdal(soapModel.getSozdal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ne_sostojavshiesja_zakazy> toModels(
		ne_sostojavshiesja_zakazySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ne_sostojavshiesja_zakazy> models = new ArrayList<ne_sostojavshiesja_zakazy>(soapModels.length);

		for (ne_sostojavshiesja_zakazySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.ne.sostojavshiesja.zakazy.service.util.ServiceProps.get(
				"lock.expiration.time.tj.ne.sostojavshiesja.zakazy.model.ne_sostojavshiesja_zakazy"));

	public ne_sostojavshiesja_zakazyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ne_sostojavshiesja_zakazy_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNe_sostojavshiesja_zakazy_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ne_sostojavshiesja_zakazy_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ne_sostojavshiesja_zakazy.class;
	}

	@Override
	public String getModelClassName() {
		return ne_sostojavshiesja_zakazy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("ne_sostojavshiesja_zakazy_id",
			getNe_sostojavshiesja_zakazy_id());
		attributes.put("prichina", getPrichina());
		attributes.put("sozdal", getSozdal());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		Long ne_sostojavshiesja_zakazy_id = (Long)attributes.get(
				"ne_sostojavshiesja_zakazy_id");

		if (ne_sostojavshiesja_zakazy_id != null) {
			setNe_sostojavshiesja_zakazy_id(ne_sostojavshiesja_zakazy_id);
		}

		String prichina = (String)attributes.get("prichina");

		if (prichina != null) {
			setPrichina(prichina);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public long getNe_sostojavshiesja_zakazy_id() {
		return _ne_sostojavshiesja_zakazy_id;
	}

	@Override
	public void setNe_sostojavshiesja_zakazy_id(
		long ne_sostojavshiesja_zakazy_id) {
		_ne_sostojavshiesja_zakazy_id = ne_sostojavshiesja_zakazy_id;
	}

	@JSON
	@Override
	public String getPrichina() {
		if (_prichina == null) {
			return StringPool.BLANK;
		}
		else {
			return _prichina;
		}
	}

	@Override
	public void setPrichina(String prichina) {
		_prichina = prichina;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ne_sostojavshiesja_zakazy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ne_sostojavshiesja_zakazy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ne_sostojavshiesja_zakazy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ne_sostojavshiesja_zakazyImpl ne_sostojavshiesja_zakazyImpl = new ne_sostojavshiesja_zakazyImpl();

		ne_sostojavshiesja_zakazyImpl.setData_sozdanija(getData_sozdanija());
		ne_sostojavshiesja_zakazyImpl.setIzvewenie_id(getIzvewenie_id());
		ne_sostojavshiesja_zakazyImpl.setNe_sostojavshiesja_zakazy_id(getNe_sostojavshiesja_zakazy_id());
		ne_sostojavshiesja_zakazyImpl.setPrichina(getPrichina());
		ne_sostojavshiesja_zakazyImpl.setSozdal(getSozdal());

		ne_sostojavshiesja_zakazyImpl.resetOriginalValues();

		return ne_sostojavshiesja_zakazyImpl;
	}

	@Override
	public int compareTo(ne_sostojavshiesja_zakazy ne_sostojavshiesja_zakazy) {
		long primaryKey = ne_sostojavshiesja_zakazy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ne_sostojavshiesja_zakazy)) {
			return false;
		}

		ne_sostojavshiesja_zakazy ne_sostojavshiesja_zakazy = (ne_sostojavshiesja_zakazy)obj;

		long primaryKey = ne_sostojavshiesja_zakazy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ne_sostojavshiesja_zakazy> toCacheModel() {
		ne_sostojavshiesja_zakazyCacheModel ne_sostojavshiesja_zakazyCacheModel = new ne_sostojavshiesja_zakazyCacheModel();

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			ne_sostojavshiesja_zakazyCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			ne_sostojavshiesja_zakazyCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		ne_sostojavshiesja_zakazyCacheModel.izvewenie_id = getIzvewenie_id();

		ne_sostojavshiesja_zakazyCacheModel.ne_sostojavshiesja_zakazy_id = getNe_sostojavshiesja_zakazy_id();

		ne_sostojavshiesja_zakazyCacheModel.prichina = getPrichina();

		String prichina = ne_sostojavshiesja_zakazyCacheModel.prichina;

		if ((prichina != null) && (prichina.length() == 0)) {
			ne_sostojavshiesja_zakazyCacheModel.prichina = null;
		}

		ne_sostojavshiesja_zakazyCacheModel.sozdal = getSozdal();

		return ne_sostojavshiesja_zakazyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", ne_sostojavshiesja_zakazy_id=");
		sb.append(getNe_sostojavshiesja_zakazy_id());
		sb.append(", prichina=");
		sb.append(getPrichina());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"tj.ne.sostojavshiesja.zakazy.model.ne_sostojavshiesja_zakazy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ne_sostojavshiesja_zakazy_id</column-name><column-value><![CDATA[");
		sb.append(getNe_sostojavshiesja_zakazy_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>prichina</column-name><column-value><![CDATA[");
		sb.append(getPrichina());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ne_sostojavshiesja_zakazy.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ne_sostojavshiesja_zakazy.class
		};
	private Date _data_sozdanija;
	private long _izvewenie_id;
	private long _ne_sostojavshiesja_zakazy_id;
	private String _prichina;
	private long _sozdal;
	private ne_sostojavshiesja_zakazy _escapedModel;
}