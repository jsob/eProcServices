/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.godovoj.plan.zakupok.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.godovoj.plan.zakupok.model.godovoj_plan_zakupok;
import tj.godovoj.plan.zakupok.model.godovoj_plan_zakupokModel;
import tj.godovoj.plan.zakupok.model.godovoj_plan_zakupokSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the godovoj_plan_zakupok service. Represents a row in the &quot;sapp.godovoj_plan_zakupok&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link godovoj_plan_zakupokModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link godovoj_plan_zakupokImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see godovoj_plan_zakupokImpl
 * @see godovoj_plan_zakupok
 * @see godovoj_plan_zakupokModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class godovoj_plan_zakupokModelImpl extends BaseModelImpl<godovoj_plan_zakupok>
	implements godovoj_plan_zakupokModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a godovoj_plan_zakupok model instance should use the {@link godovoj_plan_zakupok} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.godovoj_plan_zakupok";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "godovoj_plan_zakupok_id", Types.BIGINT },
			{ "istochnik_finansirovanija_id", Types.BIGINT },
			{ "naimenovanie_predmeta_zakupki", Types.VARCHAR },
			{ "planiruemyj_metod_zakupki_id", Types.BIGINT },
			{ "predpolagaemaja_summa", Types.DOUBLE },
			{ "sozdal", Types.BIGINT },
			{ "sroki_provedenija_zakupki", Types.VARCHAR },
			{ "summa_finansirovanija", Types.DOUBLE },
			{ "vbk_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("godovoj_plan_zakupok_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("istochnik_finansirovanija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("naimenovanie_predmeta_zakupki", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("planiruemyj_metod_zakupki_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("predpolagaemaja_summa", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sroki_provedenija_zakupki", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("summa_finansirovanija", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("vbk_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.godovoj_plan_zakupok (data_sozdanija DATE null,godovoj_plan_zakupok_id LONG not null primary key,istochnik_finansirovanija_id LONG,naimenovanie_predmeta_zakupki VARCHAR(75) null,planiruemyj_metod_zakupki_id LONG,predpolagaemaja_summa DOUBLE,sozdal LONG,sroki_provedenija_zakupki VARCHAR(75) null,summa_finansirovanija DOUBLE,vbk_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.godovoj_plan_zakupok";
	public static final String ORDER_BY_JPQL = " ORDER BY godovoj_plan_zakupok.godovoj_plan_zakupok_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.godovoj_plan_zakupok.godovoj_plan_zakupok_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.godovoj.plan.zakupok.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.godovoj.plan.zakupok.model.godovoj_plan_zakupok"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.godovoj.plan.zakupok.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.godovoj.plan.zakupok.model.godovoj_plan_zakupok"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static godovoj_plan_zakupok toModel(
		godovoj_plan_zakupokSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		godovoj_plan_zakupok model = new godovoj_plan_zakupokImpl();

		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setGodovoj_plan_zakupok_id(soapModel.getGodovoj_plan_zakupok_id());
		model.setIstochnik_finansirovanija_id(soapModel.getIstochnik_finansirovanija_id());
		model.setNaimenovanie_predmeta_zakupki(soapModel.getNaimenovanie_predmeta_zakupki());
		model.setPlaniruemyj_metod_zakupki_id(soapModel.getPlaniruemyj_metod_zakupki_id());
		model.setPredpolagaemaja_summa(soapModel.getPredpolagaemaja_summa());
		model.setSozdal(soapModel.getSozdal());
		model.setSroki_provedenija_zakupki(soapModel.getSroki_provedenija_zakupki());
		model.setSumma_finansirovanija(soapModel.getSumma_finansirovanija());
		model.setVbk_id(soapModel.getVbk_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<godovoj_plan_zakupok> toModels(
		godovoj_plan_zakupokSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<godovoj_plan_zakupok> models = new ArrayList<godovoj_plan_zakupok>(soapModels.length);

		for (godovoj_plan_zakupokSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.godovoj.plan.zakupok.service.util.ServiceProps.get(
				"lock.expiration.time.tj.godovoj.plan.zakupok.model.godovoj_plan_zakupok"));

	public godovoj_plan_zakupokModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _godovoj_plan_zakupok_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGodovoj_plan_zakupok_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _godovoj_plan_zakupok_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return godovoj_plan_zakupok.class;
	}

	@Override
	public String getModelClassName() {
		return godovoj_plan_zakupok.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("godovoj_plan_zakupok_id", getGodovoj_plan_zakupok_id());
		attributes.put("istochnik_finansirovanija_id",
			getIstochnik_finansirovanija_id());
		attributes.put("naimenovanie_predmeta_zakupki",
			getNaimenovanie_predmeta_zakupki());
		attributes.put("planiruemyj_metod_zakupki_id",
			getPlaniruemyj_metod_zakupki_id());
		attributes.put("predpolagaemaja_summa", getPredpolagaemaja_summa());
		attributes.put("sozdal", getSozdal());
		attributes.put("sroki_provedenija_zakupki",
			getSroki_provedenija_zakupki());
		attributes.put("summa_finansirovanija", getSumma_finansirovanija());
		attributes.put("vbk_id", getVbk_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long godovoj_plan_zakupok_id = (Long)attributes.get(
				"godovoj_plan_zakupok_id");

		if (godovoj_plan_zakupok_id != null) {
			setGodovoj_plan_zakupok_id(godovoj_plan_zakupok_id);
		}

		Long istochnik_finansirovanija_id = (Long)attributes.get(
				"istochnik_finansirovanija_id");

		if (istochnik_finansirovanija_id != null) {
			setIstochnik_finansirovanija_id(istochnik_finansirovanija_id);
		}

		String naimenovanie_predmeta_zakupki = (String)attributes.get(
				"naimenovanie_predmeta_zakupki");

		if (naimenovanie_predmeta_zakupki != null) {
			setNaimenovanie_predmeta_zakupki(naimenovanie_predmeta_zakupki);
		}

		Long planiruemyj_metod_zakupki_id = (Long)attributes.get(
				"planiruemyj_metod_zakupki_id");

		if (planiruemyj_metod_zakupki_id != null) {
			setPlaniruemyj_metod_zakupki_id(planiruemyj_metod_zakupki_id);
		}

		Double predpolagaemaja_summa = (Double)attributes.get(
				"predpolagaemaja_summa");

		if (predpolagaemaja_summa != null) {
			setPredpolagaemaja_summa(predpolagaemaja_summa);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}

		String sroki_provedenija_zakupki = (String)attributes.get(
				"sroki_provedenija_zakupki");

		if (sroki_provedenija_zakupki != null) {
			setSroki_provedenija_zakupki(sroki_provedenija_zakupki);
		}

		Double summa_finansirovanija = (Double)attributes.get(
				"summa_finansirovanija");

		if (summa_finansirovanija != null) {
			setSumma_finansirovanija(summa_finansirovanija);
		}

		Long vbk_id = (Long)attributes.get("vbk_id");

		if (vbk_id != null) {
			setVbk_id(vbk_id);
		}
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public long getGodovoj_plan_zakupok_id() {
		return _godovoj_plan_zakupok_id;
	}

	@Override
	public void setGodovoj_plan_zakupok_id(long godovoj_plan_zakupok_id) {
		_godovoj_plan_zakupok_id = godovoj_plan_zakupok_id;
	}

	@JSON
	@Override
	public long getIstochnik_finansirovanija_id() {
		return _istochnik_finansirovanija_id;
	}

	@Override
	public void setIstochnik_finansirovanija_id(
		long istochnik_finansirovanija_id) {
		_istochnik_finansirovanija_id = istochnik_finansirovanija_id;
	}

	@JSON
	@Override
	public String getNaimenovanie_predmeta_zakupki() {
		if (_naimenovanie_predmeta_zakupki == null) {
			return StringPool.BLANK;
		}
		else {
			return _naimenovanie_predmeta_zakupki;
		}
	}

	@Override
	public void setNaimenovanie_predmeta_zakupki(
		String naimenovanie_predmeta_zakupki) {
		_naimenovanie_predmeta_zakupki = naimenovanie_predmeta_zakupki;
	}

	@JSON
	@Override
	public long getPlaniruemyj_metod_zakupki_id() {
		return _planiruemyj_metod_zakupki_id;
	}

	@Override
	public void setPlaniruemyj_metod_zakupki_id(
		long planiruemyj_metod_zakupki_id) {
		_planiruemyj_metod_zakupki_id = planiruemyj_metod_zakupki_id;
	}

	@JSON
	@Override
	public double getPredpolagaemaja_summa() {
		return _predpolagaemaja_summa;
	}

	@Override
	public void setPredpolagaemaja_summa(double predpolagaemaja_summa) {
		_predpolagaemaja_summa = predpolagaemaja_summa;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@JSON
	@Override
	public String getSroki_provedenija_zakupki() {
		if (_sroki_provedenija_zakupki == null) {
			return StringPool.BLANK;
		}
		else {
			return _sroki_provedenija_zakupki;
		}
	}

	@Override
	public void setSroki_provedenija_zakupki(String sroki_provedenija_zakupki) {
		_sroki_provedenija_zakupki = sroki_provedenija_zakupki;
	}

	@JSON
	@Override
	public double getSumma_finansirovanija() {
		return _summa_finansirovanija;
	}

	@Override
	public void setSumma_finansirovanija(double summa_finansirovanija) {
		_summa_finansirovanija = summa_finansirovanija;
	}

	@JSON
	@Override
	public long getVbk_id() {
		return _vbk_id;
	}

	@Override
	public void setVbk_id(long vbk_id) {
		_vbk_id = vbk_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			godovoj_plan_zakupok.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public godovoj_plan_zakupok toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (godovoj_plan_zakupok)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		godovoj_plan_zakupokImpl godovoj_plan_zakupokImpl = new godovoj_plan_zakupokImpl();

		godovoj_plan_zakupokImpl.setData_sozdanija(getData_sozdanija());
		godovoj_plan_zakupokImpl.setGodovoj_plan_zakupok_id(getGodovoj_plan_zakupok_id());
		godovoj_plan_zakupokImpl.setIstochnik_finansirovanija_id(getIstochnik_finansirovanija_id());
		godovoj_plan_zakupokImpl.setNaimenovanie_predmeta_zakupki(getNaimenovanie_predmeta_zakupki());
		godovoj_plan_zakupokImpl.setPlaniruemyj_metod_zakupki_id(getPlaniruemyj_metod_zakupki_id());
		godovoj_plan_zakupokImpl.setPredpolagaemaja_summa(getPredpolagaemaja_summa());
		godovoj_plan_zakupokImpl.setSozdal(getSozdal());
		godovoj_plan_zakupokImpl.setSroki_provedenija_zakupki(getSroki_provedenija_zakupki());
		godovoj_plan_zakupokImpl.setSumma_finansirovanija(getSumma_finansirovanija());
		godovoj_plan_zakupokImpl.setVbk_id(getVbk_id());

		godovoj_plan_zakupokImpl.resetOriginalValues();

		return godovoj_plan_zakupokImpl;
	}

	@Override
	public int compareTo(godovoj_plan_zakupok godovoj_plan_zakupok) {
		long primaryKey = godovoj_plan_zakupok.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof godovoj_plan_zakupok)) {
			return false;
		}

		godovoj_plan_zakupok godovoj_plan_zakupok = (godovoj_plan_zakupok)obj;

		long primaryKey = godovoj_plan_zakupok.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<godovoj_plan_zakupok> toCacheModel() {
		godovoj_plan_zakupokCacheModel godovoj_plan_zakupokCacheModel = new godovoj_plan_zakupokCacheModel();

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			godovoj_plan_zakupokCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			godovoj_plan_zakupokCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		godovoj_plan_zakupokCacheModel.godovoj_plan_zakupok_id = getGodovoj_plan_zakupok_id();

		godovoj_plan_zakupokCacheModel.istochnik_finansirovanija_id = getIstochnik_finansirovanija_id();

		godovoj_plan_zakupokCacheModel.naimenovanie_predmeta_zakupki = getNaimenovanie_predmeta_zakupki();

		String naimenovanie_predmeta_zakupki = godovoj_plan_zakupokCacheModel.naimenovanie_predmeta_zakupki;

		if ((naimenovanie_predmeta_zakupki != null) &&
				(naimenovanie_predmeta_zakupki.length() == 0)) {
			godovoj_plan_zakupokCacheModel.naimenovanie_predmeta_zakupki = null;
		}

		godovoj_plan_zakupokCacheModel.planiruemyj_metod_zakupki_id = getPlaniruemyj_metod_zakupki_id();

		godovoj_plan_zakupokCacheModel.predpolagaemaja_summa = getPredpolagaemaja_summa();

		godovoj_plan_zakupokCacheModel.sozdal = getSozdal();

		godovoj_plan_zakupokCacheModel.sroki_provedenija_zakupki = getSroki_provedenija_zakupki();

		String sroki_provedenija_zakupki = godovoj_plan_zakupokCacheModel.sroki_provedenija_zakupki;

		if ((sroki_provedenija_zakupki != null) &&
				(sroki_provedenija_zakupki.length() == 0)) {
			godovoj_plan_zakupokCacheModel.sroki_provedenija_zakupki = null;
		}

		godovoj_plan_zakupokCacheModel.summa_finansirovanija = getSumma_finansirovanija();

		godovoj_plan_zakupokCacheModel.vbk_id = getVbk_id();

		return godovoj_plan_zakupokCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", godovoj_plan_zakupok_id=");
		sb.append(getGodovoj_plan_zakupok_id());
		sb.append(", istochnik_finansirovanija_id=");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append(", naimenovanie_predmeta_zakupki=");
		sb.append(getNaimenovanie_predmeta_zakupki());
		sb.append(", planiruemyj_metod_zakupki_id=");
		sb.append(getPlaniruemyj_metod_zakupki_id());
		sb.append(", predpolagaemaja_summa=");
		sb.append(getPredpolagaemaja_summa());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append(", sroki_provedenija_zakupki=");
		sb.append(getSroki_provedenija_zakupki());
		sb.append(", summa_finansirovanija=");
		sb.append(getSumma_finansirovanija());
		sb.append(", vbk_id=");
		sb.append(getVbk_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("tj.godovoj.plan.zakupok.model.godovoj_plan_zakupok");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>godovoj_plan_zakupok_id</column-name><column-value><![CDATA[");
		sb.append(getGodovoj_plan_zakupok_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>istochnik_finansirovanija_id</column-name><column-value><![CDATA[");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naimenovanie_predmeta_zakupki</column-name><column-value><![CDATA[");
		sb.append(getNaimenovanie_predmeta_zakupki());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>planiruemyj_metod_zakupki_id</column-name><column-value><![CDATA[");
		sb.append(getPlaniruemyj_metod_zakupki_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>predpolagaemaja_summa</column-name><column-value><![CDATA[");
		sb.append(getPredpolagaemaja_summa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sroki_provedenija_zakupki</column-name><column-value><![CDATA[");
		sb.append(getSroki_provedenija_zakupki());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>summa_finansirovanija</column-name><column-value><![CDATA[");
		sb.append(getSumma_finansirovanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vbk_id</column-name><column-value><![CDATA[");
		sb.append(getVbk_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = godovoj_plan_zakupok.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			godovoj_plan_zakupok.class
		};
	private Date _data_sozdanija;
	private long _godovoj_plan_zakupok_id;
	private long _istochnik_finansirovanija_id;
	private String _naimenovanie_predmeta_zakupki;
	private long _planiruemyj_metod_zakupki_id;
	private double _predpolagaemaja_summa;
	private long _sozdal;
	private String _sroki_provedenija_zakupki;
	private double _summa_finansirovanija;
	private long _vbk_id;
	private godovoj_plan_zakupok _escapedModel;
}