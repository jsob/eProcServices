/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.rezultat.opredelenija.sootvetstvija.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.rezultat.opredelenija.sootvetstvija.model.rezultat_opredelenija_sootvetstvija;
import tj.rezultat.opredelenija.sootvetstvija.service.persistence.rezultat_opredelenija_sootvetstvijaPersistence;
import tj.rezultat.opredelenija.sootvetstvija.service.rezultat_opredelenija_sootvetstvijaLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the rezultat_opredelenija_sootvetstvija local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.rezultat.opredelenija.sootvetstvija.service.impl.rezultat_opredelenija_sootvetstvijaLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.rezultat.opredelenija.sootvetstvija.service.impl.rezultat_opredelenija_sootvetstvijaLocalServiceImpl
 * @see tj.rezultat.opredelenija.sootvetstvija.service.rezultat_opredelenija_sootvetstvijaLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class rezultat_opredelenija_sootvetstvijaLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements rezultat_opredelenija_sootvetstvijaLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.rezultat.opredelenija.sootvetstvija.service.rezultat_opredelenija_sootvetstvijaLocalServiceUtil} to access the rezultat_opredelenija_sootvetstvija local service.
	 */

	/**
	 * Adds the rezultat_opredelenija_sootvetstvija to the database. Also notifies the appropriate model listeners.
	 *
	 * @param rezultat_opredelenija_sootvetstvija the rezultat_opredelenija_sootvetstvija
	 * @return the rezultat_opredelenija_sootvetstvija that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public rezultat_opredelenija_sootvetstvija addrezultat_opredelenija_sootvetstvija(
		rezultat_opredelenija_sootvetstvija rezultat_opredelenija_sootvetstvija) {
		rezultat_opredelenija_sootvetstvija.setNew(true);

		return rezultat_opredelenija_sootvetstvijaPersistence.update(rezultat_opredelenija_sootvetstvija);
	}

	/**
	 * Creates a new rezultat_opredelenija_sootvetstvija with the primary key. Does not add the rezultat_opredelenija_sootvetstvija to the database.
	 *
	 * @param rezultat_opredelenija_sootvetstvija_id the primary key for the new rezultat_opredelenija_sootvetstvija
	 * @return the new rezultat_opredelenija_sootvetstvija
	 */
	@Override
	public rezultat_opredelenija_sootvetstvija createrezultat_opredelenija_sootvetstvija(
		long rezultat_opredelenija_sootvetstvija_id) {
		return rezultat_opredelenija_sootvetstvijaPersistence.create(rezultat_opredelenija_sootvetstvija_id);
	}

	/**
	 * Deletes the rezultat_opredelenija_sootvetstvija with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rezultat_opredelenija_sootvetstvija_id the primary key of the rezultat_opredelenija_sootvetstvija
	 * @return the rezultat_opredelenija_sootvetstvija that was removed
	 * @throws PortalException if a rezultat_opredelenija_sootvetstvija with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public rezultat_opredelenija_sootvetstvija deleterezultat_opredelenija_sootvetstvija(
		long rezultat_opredelenija_sootvetstvija_id) throws PortalException {
		return rezultat_opredelenija_sootvetstvijaPersistence.remove(rezultat_opredelenija_sootvetstvija_id);
	}

	/**
	 * Deletes the rezultat_opredelenija_sootvetstvija from the database. Also notifies the appropriate model listeners.
	 *
	 * @param rezultat_opredelenija_sootvetstvija the rezultat_opredelenija_sootvetstvija
	 * @return the rezultat_opredelenija_sootvetstvija that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public rezultat_opredelenija_sootvetstvija deleterezultat_opredelenija_sootvetstvija(
		rezultat_opredelenija_sootvetstvija rezultat_opredelenija_sootvetstvija) {
		return rezultat_opredelenija_sootvetstvijaPersistence.remove(rezultat_opredelenija_sootvetstvija);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(rezultat_opredelenija_sootvetstvija.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return rezultat_opredelenija_sootvetstvijaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.rezultat.opredelenija.sootvetstvija.model.impl.rezultat_opredelenija_sootvetstvijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return rezultat_opredelenija_sootvetstvijaPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.rezultat.opredelenija.sootvetstvija.model.impl.rezultat_opredelenija_sootvetstvijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return rezultat_opredelenija_sootvetstvijaPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return rezultat_opredelenija_sootvetstvijaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return rezultat_opredelenija_sootvetstvijaPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public rezultat_opredelenija_sootvetstvija fetchrezultat_opredelenija_sootvetstvija(
		long rezultat_opredelenija_sootvetstvija_id) {
		return rezultat_opredelenija_sootvetstvijaPersistence.fetchByPrimaryKey(rezultat_opredelenija_sootvetstvija_id);
	}

	/**
	 * Returns the rezultat_opredelenija_sootvetstvija with the primary key.
	 *
	 * @param rezultat_opredelenija_sootvetstvija_id the primary key of the rezultat_opredelenija_sootvetstvija
	 * @return the rezultat_opredelenija_sootvetstvija
	 * @throws PortalException if a rezultat_opredelenija_sootvetstvija with the primary key could not be found
	 */
	@Override
	public rezultat_opredelenija_sootvetstvija getrezultat_opredelenija_sootvetstvija(
		long rezultat_opredelenija_sootvetstvija_id) throws PortalException {
		return rezultat_opredelenija_sootvetstvijaPersistence.findByPrimaryKey(rezultat_opredelenija_sootvetstvija_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(rezultat_opredelenija_sootvetstvijaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(rezultat_opredelenija_sootvetstvija.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"rezultat_opredelenija_sootvetstvija_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(rezultat_opredelenija_sootvetstvijaLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(rezultat_opredelenija_sootvetstvija.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"rezultat_opredelenija_sootvetstvija_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(rezultat_opredelenija_sootvetstvijaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(rezultat_opredelenija_sootvetstvija.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"rezultat_opredelenija_sootvetstvija_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return rezultat_opredelenija_sootvetstvijaLocalService.deleterezultat_opredelenija_sootvetstvija((rezultat_opredelenija_sootvetstvija)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return rezultat_opredelenija_sootvetstvijaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the rezultat_opredelenija_sootvetstvijas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.rezultat.opredelenija.sootvetstvija.model.impl.rezultat_opredelenija_sootvetstvijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of rezultat_opredelenija_sootvetstvijas
	 * @param end the upper bound of the range of rezultat_opredelenija_sootvetstvijas (not inclusive)
	 * @return the range of rezultat_opredelenija_sootvetstvijas
	 */
	@Override
	public List<rezultat_opredelenija_sootvetstvija> getrezultat_opredelenija_sootvetstvijas(
		int start, int end) {
		return rezultat_opredelenija_sootvetstvijaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of rezultat_opredelenija_sootvetstvijas.
	 *
	 * @return the number of rezultat_opredelenija_sootvetstvijas
	 */
	@Override
	public int getrezultat_opredelenija_sootvetstvijasCount() {
		return rezultat_opredelenija_sootvetstvijaPersistence.countAll();
	}

	/**
	 * Updates the rezultat_opredelenija_sootvetstvija in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param rezultat_opredelenija_sootvetstvija the rezultat_opredelenija_sootvetstvija
	 * @return the rezultat_opredelenija_sootvetstvija that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public rezultat_opredelenija_sootvetstvija updaterezultat_opredelenija_sootvetstvija(
		rezultat_opredelenija_sootvetstvija rezultat_opredelenija_sootvetstvija) {
		return rezultat_opredelenija_sootvetstvijaPersistence.update(rezultat_opredelenija_sootvetstvija);
	}

	/**
	 * Returns the rezultat_opredelenija_sootvetstvija local service.
	 *
	 * @return the rezultat_opredelenija_sootvetstvija local service
	 */
	public rezultat_opredelenija_sootvetstvijaLocalService getrezultat_opredelenija_sootvetstvijaLocalService() {
		return rezultat_opredelenija_sootvetstvijaLocalService;
	}

	/**
	 * Sets the rezultat_opredelenija_sootvetstvija local service.
	 *
	 * @param rezultat_opredelenija_sootvetstvijaLocalService the rezultat_opredelenija_sootvetstvija local service
	 */
	public void setrezultat_opredelenija_sootvetstvijaLocalService(
		rezultat_opredelenija_sootvetstvijaLocalService rezultat_opredelenija_sootvetstvijaLocalService) {
		this.rezultat_opredelenija_sootvetstvijaLocalService = rezultat_opredelenija_sootvetstvijaLocalService;
	}

	/**
	 * Returns the rezultat_opredelenija_sootvetstvija persistence.
	 *
	 * @return the rezultat_opredelenija_sootvetstvija persistence
	 */
	public rezultat_opredelenija_sootvetstvijaPersistence getrezultat_opredelenija_sootvetstvijaPersistence() {
		return rezultat_opredelenija_sootvetstvijaPersistence;
	}

	/**
	 * Sets the rezultat_opredelenija_sootvetstvija persistence.
	 *
	 * @param rezultat_opredelenija_sootvetstvijaPersistence the rezultat_opredelenija_sootvetstvija persistence
	 */
	public void setrezultat_opredelenija_sootvetstvijaPersistence(
		rezultat_opredelenija_sootvetstvijaPersistence rezultat_opredelenija_sootvetstvijaPersistence) {
		this.rezultat_opredelenija_sootvetstvijaPersistence = rezultat_opredelenija_sootvetstvijaPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.rezultat.opredelenija.sootvetstvija.model.rezultat_opredelenija_sootvetstvija",
			rezultat_opredelenija_sootvetstvijaLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.rezultat.opredelenija.sootvetstvija.model.rezultat_opredelenija_sootvetstvija");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return rezultat_opredelenija_sootvetstvijaLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return rezultat_opredelenija_sootvetstvija.class;
	}

	protected String getModelClassName() {
		return rezultat_opredelenija_sootvetstvija.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = rezultat_opredelenija_sootvetstvijaPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = rezultat_opredelenija_sootvetstvijaLocalService.class)
	protected rezultat_opredelenija_sootvetstvijaLocalService rezultat_opredelenija_sootvetstvijaLocalService;
	@BeanReference(type = rezultat_opredelenija_sootvetstvijaPersistence.class)
	protected rezultat_opredelenija_sootvetstvijaPersistence rezultat_opredelenija_sootvetstvijaPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}