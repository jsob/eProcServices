/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.protokol.vskrytija.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.protokol.vskrytija.model.protokol_vskrytija;
import tj.protokol.vskrytija.model.protokol_vskrytijaModel;
import tj.protokol.vskrytija.model.protokol_vskrytijaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the protokol_vskrytija service. Represents a row in the &quot;sapp.protokol_vskrytija&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link protokol_vskrytijaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link protokol_vskrytijaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see protokol_vskrytijaImpl
 * @see protokol_vskrytija
 * @see protokol_vskrytijaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class protokol_vskrytijaModelImpl extends BaseModelImpl<protokol_vskrytija>
	implements protokol_vskrytijaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a protokol_vskrytija model instance should use the {@link protokol_vskrytija} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.protokol_vskrytija";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_vskrytija", Types.TIMESTAMP },
			{ "izvewenie_id", Types.BIGINT },
			{ "protokol_vskrytija_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_vskrytija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("protokol_vskrytija_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.protokol_vskrytija (data_vskrytija DATE null,izvewenie_id LONG,protokol_vskrytija_id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table sapp.protokol_vskrytija";
	public static final String ORDER_BY_JPQL = " ORDER BY protokol_vskrytija.protokol_vskrytija_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.protokol_vskrytija.protokol_vskrytija_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.protokol.vskrytija.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.protokol.vskrytija.model.protokol_vskrytija"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.protokol.vskrytija.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.protokol.vskrytija.model.protokol_vskrytija"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static protokol_vskrytija toModel(protokol_vskrytijaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		protokol_vskrytija model = new protokol_vskrytijaImpl();

		model.setData_vskrytija(soapModel.getData_vskrytija());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setProtokol_vskrytija_id(soapModel.getProtokol_vskrytija_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<protokol_vskrytija> toModels(
		protokol_vskrytijaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<protokol_vskrytija> models = new ArrayList<protokol_vskrytija>(soapModels.length);

		for (protokol_vskrytijaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.protokol.vskrytija.service.util.ServiceProps.get(
				"lock.expiration.time.tj.protokol.vskrytija.model.protokol_vskrytija"));

	public protokol_vskrytijaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _protokol_vskrytija_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProtokol_vskrytija_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _protokol_vskrytija_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return protokol_vskrytija.class;
	}

	@Override
	public String getModelClassName() {
		return protokol_vskrytija.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_vskrytija", getData_vskrytija());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("protokol_vskrytija_id", getProtokol_vskrytija_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_vskrytija = (Date)attributes.get("data_vskrytija");

		if (data_vskrytija != null) {
			setData_vskrytija(data_vskrytija);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		Long protokol_vskrytija_id = (Long)attributes.get(
				"protokol_vskrytija_id");

		if (protokol_vskrytija_id != null) {
			setProtokol_vskrytija_id(protokol_vskrytija_id);
		}
	}

	@JSON
	@Override
	public Date getData_vskrytija() {
		return _data_vskrytija;
	}

	@Override
	public void setData_vskrytija(Date data_vskrytija) {
		_data_vskrytija = data_vskrytija;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public long getProtokol_vskrytija_id() {
		return _protokol_vskrytija_id;
	}

	@Override
	public void setProtokol_vskrytija_id(long protokol_vskrytija_id) {
		_protokol_vskrytija_id = protokol_vskrytija_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			protokol_vskrytija.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public protokol_vskrytija toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (protokol_vskrytija)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		protokol_vskrytijaImpl protokol_vskrytijaImpl = new protokol_vskrytijaImpl();

		protokol_vskrytijaImpl.setData_vskrytija(getData_vskrytija());
		protokol_vskrytijaImpl.setIzvewenie_id(getIzvewenie_id());
		protokol_vskrytijaImpl.setProtokol_vskrytija_id(getProtokol_vskrytija_id());

		protokol_vskrytijaImpl.resetOriginalValues();

		return protokol_vskrytijaImpl;
	}

	@Override
	public int compareTo(protokol_vskrytija protokol_vskrytija) {
		long primaryKey = protokol_vskrytija.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof protokol_vskrytija)) {
			return false;
		}

		protokol_vskrytija protokol_vskrytija = (protokol_vskrytija)obj;

		long primaryKey = protokol_vskrytija.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<protokol_vskrytija> toCacheModel() {
		protokol_vskrytijaCacheModel protokol_vskrytijaCacheModel = new protokol_vskrytijaCacheModel();

		Date data_vskrytija = getData_vskrytija();

		if (data_vskrytija != null) {
			protokol_vskrytijaCacheModel.data_vskrytija = data_vskrytija.getTime();
		}
		else {
			protokol_vskrytijaCacheModel.data_vskrytija = Long.MIN_VALUE;
		}

		protokol_vskrytijaCacheModel.izvewenie_id = getIzvewenie_id();

		protokol_vskrytijaCacheModel.protokol_vskrytija_id = getProtokol_vskrytija_id();

		return protokol_vskrytijaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{data_vskrytija=");
		sb.append(getData_vskrytija());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", protokol_vskrytija_id=");
		sb.append(getProtokol_vskrytija_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("tj.protokol.vskrytija.model.protokol_vskrytija");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_vskrytija</column-name><column-value><![CDATA[");
		sb.append(getData_vskrytija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>protokol_vskrytija_id</column-name><column-value><![CDATA[");
		sb.append(getProtokol_vskrytija_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = protokol_vskrytija.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			protokol_vskrytija.class
		};
	private Date _data_vskrytija;
	private long _izvewenie_id;
	private long _protokol_vskrytija_id;
	private protokol_vskrytija _escapedModel;
}