/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.protokol.podachi.pretenzij.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.protokol.podachi.pretenzij.model.protokol_podachi_pretenzij;
import tj.protokol.podachi.pretenzij.service.persistence.protokol_podachi_pretenzijPersistence;
import tj.protokol.podachi.pretenzij.service.protokol_podachi_pretenzijLocalService;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the protokol_podachi_pretenzij local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.protokol.podachi.pretenzij.service.impl.protokol_podachi_pretenzijLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.protokol.podachi.pretenzij.service.impl.protokol_podachi_pretenzijLocalServiceImpl
 * @see tj.protokol.podachi.pretenzij.service.protokol_podachi_pretenzijLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class protokol_podachi_pretenzijLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements protokol_podachi_pretenzijLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.protokol.podachi.pretenzij.service.protokol_podachi_pretenzijLocalServiceUtil} to access the protokol_podachi_pretenzij local service.
	 */

	/**
	 * Adds the protokol_podachi_pretenzij to the database. Also notifies the appropriate model listeners.
	 *
	 * @param protokol_podachi_pretenzij the protokol_podachi_pretenzij
	 * @return the protokol_podachi_pretenzij that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public protokol_podachi_pretenzij addprotokol_podachi_pretenzij(
		protokol_podachi_pretenzij protokol_podachi_pretenzij) {
		protokol_podachi_pretenzij.setNew(true);

		return protokol_podachi_pretenzijPersistence.update(protokol_podachi_pretenzij);
	}

	/**
	 * Creates a new protokol_podachi_pretenzij with the primary key. Does not add the protokol_podachi_pretenzij to the database.
	 *
	 * @param protokol_podachi_pretenzij_id the primary key for the new protokol_podachi_pretenzij
	 * @return the new protokol_podachi_pretenzij
	 */
	@Override
	public protokol_podachi_pretenzij createprotokol_podachi_pretenzij(
		long protokol_podachi_pretenzij_id) {
		return protokol_podachi_pretenzijPersistence.create(protokol_podachi_pretenzij_id);
	}

	/**
	 * Deletes the protokol_podachi_pretenzij with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param protokol_podachi_pretenzij_id the primary key of the protokol_podachi_pretenzij
	 * @return the protokol_podachi_pretenzij that was removed
	 * @throws PortalException if a protokol_podachi_pretenzij with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public protokol_podachi_pretenzij deleteprotokol_podachi_pretenzij(
		long protokol_podachi_pretenzij_id) throws PortalException {
		return protokol_podachi_pretenzijPersistence.remove(protokol_podachi_pretenzij_id);
	}

	/**
	 * Deletes the protokol_podachi_pretenzij from the database. Also notifies the appropriate model listeners.
	 *
	 * @param protokol_podachi_pretenzij the protokol_podachi_pretenzij
	 * @return the protokol_podachi_pretenzij that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public protokol_podachi_pretenzij deleteprotokol_podachi_pretenzij(
		protokol_podachi_pretenzij protokol_podachi_pretenzij) {
		return protokol_podachi_pretenzijPersistence.remove(protokol_podachi_pretenzij);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(protokol_podachi_pretenzij.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return protokol_podachi_pretenzijPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.protokol.podachi.pretenzij.model.impl.protokol_podachi_pretenzijModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return protokol_podachi_pretenzijPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.protokol.podachi.pretenzij.model.impl.protokol_podachi_pretenzijModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return protokol_podachi_pretenzijPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return protokol_podachi_pretenzijPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return protokol_podachi_pretenzijPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public protokol_podachi_pretenzij fetchprotokol_podachi_pretenzij(
		long protokol_podachi_pretenzij_id) {
		return protokol_podachi_pretenzijPersistence.fetchByPrimaryKey(protokol_podachi_pretenzij_id);
	}

	/**
	 * Returns the protokol_podachi_pretenzij with the primary key.
	 *
	 * @param protokol_podachi_pretenzij_id the primary key of the protokol_podachi_pretenzij
	 * @return the protokol_podachi_pretenzij
	 * @throws PortalException if a protokol_podachi_pretenzij with the primary key could not be found
	 */
	@Override
	public protokol_podachi_pretenzij getprotokol_podachi_pretenzij(
		long protokol_podachi_pretenzij_id) throws PortalException {
		return protokol_podachi_pretenzijPersistence.findByPrimaryKey(protokol_podachi_pretenzij_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(protokol_podachi_pretenzijLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(protokol_podachi_pretenzij.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"protokol_podachi_pretenzij_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(protokol_podachi_pretenzijLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(protokol_podachi_pretenzij.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"protokol_podachi_pretenzij_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(protokol_podachi_pretenzijLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(protokol_podachi_pretenzij.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"protokol_podachi_pretenzij_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return protokol_podachi_pretenzijLocalService.deleteprotokol_podachi_pretenzij((protokol_podachi_pretenzij)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return protokol_podachi_pretenzijPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the protokol_podachi_pretenzijs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.protokol.podachi.pretenzij.model.impl.protokol_podachi_pretenzijModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of protokol_podachi_pretenzijs
	 * @param end the upper bound of the range of protokol_podachi_pretenzijs (not inclusive)
	 * @return the range of protokol_podachi_pretenzijs
	 */
	@Override
	public List<protokol_podachi_pretenzij> getprotokol_podachi_pretenzijs(
		int start, int end) {
		return protokol_podachi_pretenzijPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of protokol_podachi_pretenzijs.
	 *
	 * @return the number of protokol_podachi_pretenzijs
	 */
	@Override
	public int getprotokol_podachi_pretenzijsCount() {
		return protokol_podachi_pretenzijPersistence.countAll();
	}

	/**
	 * Updates the protokol_podachi_pretenzij in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param protokol_podachi_pretenzij the protokol_podachi_pretenzij
	 * @return the protokol_podachi_pretenzij that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public protokol_podachi_pretenzij updateprotokol_podachi_pretenzij(
		protokol_podachi_pretenzij protokol_podachi_pretenzij) {
		return protokol_podachi_pretenzijPersistence.update(protokol_podachi_pretenzij);
	}

	/**
	 * Returns the protokol_podachi_pretenzij local service.
	 *
	 * @return the protokol_podachi_pretenzij local service
	 */
	public protokol_podachi_pretenzijLocalService getprotokol_podachi_pretenzijLocalService() {
		return protokol_podachi_pretenzijLocalService;
	}

	/**
	 * Sets the protokol_podachi_pretenzij local service.
	 *
	 * @param protokol_podachi_pretenzijLocalService the protokol_podachi_pretenzij local service
	 */
	public void setprotokol_podachi_pretenzijLocalService(
		protokol_podachi_pretenzijLocalService protokol_podachi_pretenzijLocalService) {
		this.protokol_podachi_pretenzijLocalService = protokol_podachi_pretenzijLocalService;
	}

	/**
	 * Returns the protokol_podachi_pretenzij persistence.
	 *
	 * @return the protokol_podachi_pretenzij persistence
	 */
	public protokol_podachi_pretenzijPersistence getprotokol_podachi_pretenzijPersistence() {
		return protokol_podachi_pretenzijPersistence;
	}

	/**
	 * Sets the protokol_podachi_pretenzij persistence.
	 *
	 * @param protokol_podachi_pretenzijPersistence the protokol_podachi_pretenzij persistence
	 */
	public void setprotokol_podachi_pretenzijPersistence(
		protokol_podachi_pretenzijPersistence protokol_podachi_pretenzijPersistence) {
		this.protokol_podachi_pretenzijPersistence = protokol_podachi_pretenzijPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.protokol.podachi.pretenzij.model.protokol_podachi_pretenzij",
			protokol_podachi_pretenzijLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.protokol.podachi.pretenzij.model.protokol_podachi_pretenzij");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return protokol_podachi_pretenzijLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return protokol_podachi_pretenzij.class;
	}

	protected String getModelClassName() {
		return protokol_podachi_pretenzij.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = protokol_podachi_pretenzijPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = protokol_podachi_pretenzijLocalService.class)
	protected protokol_podachi_pretenzijLocalService protokol_podachi_pretenzijLocalService;
	@BeanReference(type = protokol_podachi_pretenzijPersistence.class)
	protected protokol_podachi_pretenzijPersistence protokol_podachi_pretenzijPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}