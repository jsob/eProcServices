/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.bjudzhetnoe.polnomochie.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.bjudzhetnoe.polnomochie.model.bjudzhetnoe_polnomochie;
import tj.bjudzhetnoe.polnomochie.model.bjudzhetnoe_polnomochieModel;
import tj.bjudzhetnoe.polnomochie.model.bjudzhetnoe_polnomochieSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the bjudzhetnoe_polnomochie service. Represents a row in the &quot;sapp.bjudzhetnoe_polnomochie&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link bjudzhetnoe_polnomochieModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link bjudzhetnoe_polnomochieImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see bjudzhetnoe_polnomochieImpl
 * @see bjudzhetnoe_polnomochie
 * @see bjudzhetnoe_polnomochieModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class bjudzhetnoe_polnomochieModelImpl extends BaseModelImpl<bjudzhetnoe_polnomochie>
	implements bjudzhetnoe_polnomochieModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bjudzhetnoe_polnomochie model instance should use the {@link bjudzhetnoe_polnomochie} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.bjudzhetnoe_polnomochie";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bjudzhetnoe_polnomochie_id", Types.BIGINT },
			{ "naimenovanie", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bjudzhetnoe_polnomochie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("naimenovanie", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.bjudzhetnoe_polnomochie (bjudzhetnoe_polnomochie_id LONG not null primary key,naimenovanie VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sapp.bjudzhetnoe_polnomochie";
	public static final String ORDER_BY_JPQL = " ORDER BY bjudzhetnoe_polnomochie.bjudzhetnoe_polnomochie_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.bjudzhetnoe_polnomochie.bjudzhetnoe_polnomochie_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.bjudzhetnoe.polnomochie.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.bjudzhetnoe.polnomochie.model.bjudzhetnoe_polnomochie"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.bjudzhetnoe.polnomochie.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.bjudzhetnoe.polnomochie.model.bjudzhetnoe_polnomochie"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static bjudzhetnoe_polnomochie toModel(
		bjudzhetnoe_polnomochieSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		bjudzhetnoe_polnomochie model = new bjudzhetnoe_polnomochieImpl();

		model.setBjudzhetnoe_polnomochie_id(soapModel.getBjudzhetnoe_polnomochie_id());
		model.setNaimenovanie(soapModel.getNaimenovanie());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<bjudzhetnoe_polnomochie> toModels(
		bjudzhetnoe_polnomochieSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<bjudzhetnoe_polnomochie> models = new ArrayList<bjudzhetnoe_polnomochie>(soapModels.length);

		for (bjudzhetnoe_polnomochieSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.bjudzhetnoe.polnomochie.service.util.ServiceProps.get(
				"lock.expiration.time.tj.bjudzhetnoe.polnomochie.model.bjudzhetnoe_polnomochie"));

	public bjudzhetnoe_polnomochieModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bjudzhetnoe_polnomochie_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBjudzhetnoe_polnomochie_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bjudzhetnoe_polnomochie_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return bjudzhetnoe_polnomochie.class;
	}

	@Override
	public String getModelClassName() {
		return bjudzhetnoe_polnomochie.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bjudzhetnoe_polnomochie_id",
			getBjudzhetnoe_polnomochie_id());
		attributes.put("naimenovanie", getNaimenovanie());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bjudzhetnoe_polnomochie_id = (Long)attributes.get(
				"bjudzhetnoe_polnomochie_id");

		if (bjudzhetnoe_polnomochie_id != null) {
			setBjudzhetnoe_polnomochie_id(bjudzhetnoe_polnomochie_id);
		}

		String naimenovanie = (String)attributes.get("naimenovanie");

		if (naimenovanie != null) {
			setNaimenovanie(naimenovanie);
		}
	}

	@JSON
	@Override
	public long getBjudzhetnoe_polnomochie_id() {
		return _bjudzhetnoe_polnomochie_id;
	}

	@Override
	public void setBjudzhetnoe_polnomochie_id(long bjudzhetnoe_polnomochie_id) {
		_bjudzhetnoe_polnomochie_id = bjudzhetnoe_polnomochie_id;
	}

	@JSON
	@Override
	public String getNaimenovanie() {
		if (_naimenovanie == null) {
			return StringPool.BLANK;
		}
		else {
			return _naimenovanie;
		}
	}

	@Override
	public void setNaimenovanie(String naimenovanie) {
		_naimenovanie = naimenovanie;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			bjudzhetnoe_polnomochie.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public bjudzhetnoe_polnomochie toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (bjudzhetnoe_polnomochie)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		bjudzhetnoe_polnomochieImpl bjudzhetnoe_polnomochieImpl = new bjudzhetnoe_polnomochieImpl();

		bjudzhetnoe_polnomochieImpl.setBjudzhetnoe_polnomochie_id(getBjudzhetnoe_polnomochie_id());
		bjudzhetnoe_polnomochieImpl.setNaimenovanie(getNaimenovanie());

		bjudzhetnoe_polnomochieImpl.resetOriginalValues();

		return bjudzhetnoe_polnomochieImpl;
	}

	@Override
	public int compareTo(bjudzhetnoe_polnomochie bjudzhetnoe_polnomochie) {
		long primaryKey = bjudzhetnoe_polnomochie.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof bjudzhetnoe_polnomochie)) {
			return false;
		}

		bjudzhetnoe_polnomochie bjudzhetnoe_polnomochie = (bjudzhetnoe_polnomochie)obj;

		long primaryKey = bjudzhetnoe_polnomochie.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<bjudzhetnoe_polnomochie> toCacheModel() {
		bjudzhetnoe_polnomochieCacheModel bjudzhetnoe_polnomochieCacheModel = new bjudzhetnoe_polnomochieCacheModel();

		bjudzhetnoe_polnomochieCacheModel.bjudzhetnoe_polnomochie_id = getBjudzhetnoe_polnomochie_id();

		bjudzhetnoe_polnomochieCacheModel.naimenovanie = getNaimenovanie();

		String naimenovanie = bjudzhetnoe_polnomochieCacheModel.naimenovanie;

		if ((naimenovanie != null) && (naimenovanie.length() == 0)) {
			bjudzhetnoe_polnomochieCacheModel.naimenovanie = null;
		}

		return bjudzhetnoe_polnomochieCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{bjudzhetnoe_polnomochie_id=");
		sb.append(getBjudzhetnoe_polnomochie_id());
		sb.append(", naimenovanie=");
		sb.append(getNaimenovanie());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("tj.bjudzhetnoe.polnomochie.model.bjudzhetnoe_polnomochie");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bjudzhetnoe_polnomochie_id</column-name><column-value><![CDATA[");
		sb.append(getBjudzhetnoe_polnomochie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naimenovanie</column-name><column-value><![CDATA[");
		sb.append(getNaimenovanie());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = bjudzhetnoe_polnomochie.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			bjudzhetnoe_polnomochie.class
		};
	private long _bjudzhetnoe_polnomochie_id;
	private String _naimenovanie;
	private bjudzhetnoe_polnomochie _escapedModel;
}