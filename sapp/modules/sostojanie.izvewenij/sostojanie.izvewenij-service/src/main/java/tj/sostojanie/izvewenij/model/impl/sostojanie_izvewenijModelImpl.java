/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.sostojanie.izvewenij.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.sostojanie.izvewenij.model.sostojanie_izvewenij;
import tj.sostojanie.izvewenij.model.sostojanie_izvewenijModel;
import tj.sostojanie.izvewenij.model.sostojanie_izvewenijSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the sostojanie_izvewenij service. Represents a row in the &quot;sapp.sostojanie_izvewenij&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link sostojanie_izvewenijModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link sostojanie_izvewenijImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see sostojanie_izvewenijImpl
 * @see sostojanie_izvewenij
 * @see sostojanie_izvewenijModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class sostojanie_izvewenijModelImpl extends BaseModelImpl<sostojanie_izvewenij>
	implements sostojanie_izvewenijModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sostojanie_izvewenij model instance should use the {@link sostojanie_izvewenij} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.sostojanie_izvewenij";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sostojanie", Types.VARCHAR },
			{ "sostojanie_izvewenij_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sostojanie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sostojanie_izvewenij_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.sostojanie_izvewenij (sostojanie VARCHAR(75) null,sostojanie_izvewenij_id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table sapp.sostojanie_izvewenij";
	public static final String ORDER_BY_JPQL = " ORDER BY sostojanie_izvewenij.sostojanie_izvewenij_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.sostojanie_izvewenij.sostojanie_izvewenij_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.sostojanie.izvewenij.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.sostojanie.izvewenij.model.sostojanie_izvewenij"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.sostojanie.izvewenij.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.sostojanie.izvewenij.model.sostojanie_izvewenij"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static sostojanie_izvewenij toModel(
		sostojanie_izvewenijSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		sostojanie_izvewenij model = new sostojanie_izvewenijImpl();

		model.setSostojanie(soapModel.getSostojanie());
		model.setSostojanie_izvewenij_id(soapModel.getSostojanie_izvewenij_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<sostojanie_izvewenij> toModels(
		sostojanie_izvewenijSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<sostojanie_izvewenij> models = new ArrayList<sostojanie_izvewenij>(soapModels.length);

		for (sostojanie_izvewenijSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.sostojanie.izvewenij.service.util.ServiceProps.get(
				"lock.expiration.time.tj.sostojanie.izvewenij.model.sostojanie_izvewenij"));

	public sostojanie_izvewenijModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sostojanie_izvewenij_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSostojanie_izvewenij_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sostojanie_izvewenij_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return sostojanie_izvewenij.class;
	}

	@Override
	public String getModelClassName() {
		return sostojanie_izvewenij.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sostojanie", getSostojanie());
		attributes.put("sostojanie_izvewenij_id", getSostojanie_izvewenij_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String sostojanie = (String)attributes.get("sostojanie");

		if (sostojanie != null) {
			setSostojanie(sostojanie);
		}

		Long sostojanie_izvewenij_id = (Long)attributes.get(
				"sostojanie_izvewenij_id");

		if (sostojanie_izvewenij_id != null) {
			setSostojanie_izvewenij_id(sostojanie_izvewenij_id);
		}
	}

	@JSON
	@Override
	public String getSostojanie() {
		if (_sostojanie == null) {
			return StringPool.BLANK;
		}
		else {
			return _sostojanie;
		}
	}

	@Override
	public void setSostojanie(String sostojanie) {
		_sostojanie = sostojanie;
	}

	@JSON
	@Override
	public long getSostojanie_izvewenij_id() {
		return _sostojanie_izvewenij_id;
	}

	@Override
	public void setSostojanie_izvewenij_id(long sostojanie_izvewenij_id) {
		_sostojanie_izvewenij_id = sostojanie_izvewenij_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			sostojanie_izvewenij.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public sostojanie_izvewenij toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (sostojanie_izvewenij)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		sostojanie_izvewenijImpl sostojanie_izvewenijImpl = new sostojanie_izvewenijImpl();

		sostojanie_izvewenijImpl.setSostojanie(getSostojanie());
		sostojanie_izvewenijImpl.setSostojanie_izvewenij_id(getSostojanie_izvewenij_id());

		sostojanie_izvewenijImpl.resetOriginalValues();

		return sostojanie_izvewenijImpl;
	}

	@Override
	public int compareTo(sostojanie_izvewenij sostojanie_izvewenij) {
		long primaryKey = sostojanie_izvewenij.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof sostojanie_izvewenij)) {
			return false;
		}

		sostojanie_izvewenij sostojanie_izvewenij = (sostojanie_izvewenij)obj;

		long primaryKey = sostojanie_izvewenij.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<sostojanie_izvewenij> toCacheModel() {
		sostojanie_izvewenijCacheModel sostojanie_izvewenijCacheModel = new sostojanie_izvewenijCacheModel();

		sostojanie_izvewenijCacheModel.sostojanie = getSostojanie();

		String sostojanie = sostojanie_izvewenijCacheModel.sostojanie;

		if ((sostojanie != null) && (sostojanie.length() == 0)) {
			sostojanie_izvewenijCacheModel.sostojanie = null;
		}

		sostojanie_izvewenijCacheModel.sostojanie_izvewenij_id = getSostojanie_izvewenij_id();

		return sostojanie_izvewenijCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{sostojanie=");
		sb.append(getSostojanie());
		sb.append(", sostojanie_izvewenij_id=");
		sb.append(getSostojanie_izvewenij_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("tj.sostojanie.izvewenij.model.sostojanie_izvewenij");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sostojanie</column-name><column-value><![CDATA[");
		sb.append(getSostojanie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sostojanie_izvewenij_id</column-name><column-value><![CDATA[");
		sb.append(getSostojanie_izvewenij_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = sostojanie_izvewenij.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			sostojanie_izvewenij.class
		};
	private String _sostojanie;
	private long _sostojanie_izvewenij_id;
	private sostojanie_izvewenij _escapedModel;
}