/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.zakazchiki.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import tj.zakazchiki.model.zakazchiki;
import tj.zakazchiki.model.zakazchikiModel;
import tj.zakazchiki.model.zakazchikiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the zakazchiki service. Represents a row in the &quot;sapp.zakazchiki&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link zakazchikiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link zakazchikiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see zakazchikiImpl
 * @see zakazchiki
 * @see zakazchikiModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class zakazchikiModelImpl extends BaseModelImpl<zakazchiki>
	implements zakazchikiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a zakazchiki model instance should use the {@link zakazchiki} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.zakazchiki";
	public static final Object[][] TABLE_COLUMNS = {
			{ "adres", Types.VARCHAR },
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "ein", Types.VARCHAR },
			{ "fbk_id", Types.BIGINT },
			{ "gorod", Types.VARCHAR },
			{ "inn", Types.VARCHAR },
			{ "istochnik_finansirovanija_id", Types.BIGINT },
			{ "izmenil", Types.BIGINT },
			{ "je_pochta", Types.VARCHAR },
			{ "kontaktnyj_telefon", Types.VARCHAR },
			{ "kvalificirovannaja_organizacija", Types.BIGINT },
			{ "naimenovanie", Types.VARCHAR },
			{ "oblast_id", Types.BIGINT },
			{ "otvetstvennoe_lico", Types.VARCHAR },
			{ "rajon_id", Types.BIGINT },
			{ "rukovoditel", Types.VARCHAR },
			{ "sozdal", Types.BIGINT },
			{ "vbk_id", Types.BIGINT },
			{ "zakazchiki_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("adres", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ein", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fbk_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gorod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("inn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("istochnik_finansirovanija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("je_pochta", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kontaktnyj_telefon", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("kvalificirovannaja_organizacija", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("naimenovanie", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oblast_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("otvetstvennoe_lico", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rajon_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rukovoditel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vbk_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("zakazchiki_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.zakazchiki (adres VARCHAR(75) null,data_izmenenija DATE null,data_sozdanija DATE null,ein VARCHAR(75) null,fbk_id LONG,gorod VARCHAR(75) null,inn VARCHAR(75) null,istochnik_finansirovanija_id LONG,izmenil LONG,je_pochta VARCHAR(75) null,kontaktnyj_telefon VARCHAR(75) null,kvalificirovannaja_organizacija LONG,naimenovanie VARCHAR(75) null,oblast_id LONG,otvetstvennoe_lico VARCHAR(75) null,rajon_id LONG,rukovoditel VARCHAR(75) null,sozdal LONG,vbk_id LONG,zakazchiki_id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table sapp.zakazchiki";
	public static final String ORDER_BY_JPQL = " ORDER BY zakazchiki.zakazchiki_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.zakazchiki.zakazchiki_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.zakazchiki.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.zakazchiki.model.zakazchiki"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.zakazchiki.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.zakazchiki.model.zakazchiki"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static zakazchiki toModel(zakazchikiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		zakazchiki model = new zakazchikiImpl();

		model.setAdres(soapModel.getAdres());
		model.setData_izmenenija(soapModel.getData_izmenenija());
		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setEin(soapModel.getEin());
		model.setFbk_id(soapModel.getFbk_id());
		model.setGorod(soapModel.getGorod());
		model.setInn(soapModel.getInn());
		model.setIstochnik_finansirovanija_id(soapModel.getIstochnik_finansirovanija_id());
		model.setIzmenil(soapModel.getIzmenil());
		model.setJe_pochta(soapModel.getJe_pochta());
		model.setKontaktnyj_telefon(soapModel.getKontaktnyj_telefon());
		model.setKvalificirovannaja_organizacija(soapModel.getKvalificirovannaja_organizacija());
		model.setNaimenovanie(soapModel.getNaimenovanie());
		model.setOblast_id(soapModel.getOblast_id());
		model.setOtvetstvennoe_lico(soapModel.getOtvetstvennoe_lico());
		model.setRajon_id(soapModel.getRajon_id());
		model.setRukovoditel(soapModel.getRukovoditel());
		model.setSozdal(soapModel.getSozdal());
		model.setVbk_id(soapModel.getVbk_id());
		model.setZakazchiki_id(soapModel.getZakazchiki_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<zakazchiki> toModels(zakazchikiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<zakazchiki> models = new ArrayList<zakazchiki>(soapModels.length);

		for (zakazchikiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.zakazchiki.service.util.ServiceProps.get(
				"lock.expiration.time.tj.zakazchiki.model.zakazchiki"));

	public zakazchikiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _zakazchiki_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setZakazchiki_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _zakazchiki_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return zakazchiki.class;
	}

	@Override
	public String getModelClassName() {
		return zakazchiki.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("adres", getAdres());
		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("ein", getEin());
		attributes.put("fbk_id", getFbk_id());
		attributes.put("gorod", getGorod());
		attributes.put("inn", getInn());
		attributes.put("istochnik_finansirovanija_id",
			getIstochnik_finansirovanija_id());
		attributes.put("izmenil", getIzmenil());
		attributes.put("je_pochta", getJe_pochta());
		attributes.put("kontaktnyj_telefon", getKontaktnyj_telefon());
		attributes.put("kvalificirovannaja_organizacija",
			getKvalificirovannaja_organizacija());
		attributes.put("naimenovanie", getNaimenovanie());
		attributes.put("oblast_id", getOblast_id());
		attributes.put("otvetstvennoe_lico", getOtvetstvennoe_lico());
		attributes.put("rajon_id", getRajon_id());
		attributes.put("rukovoditel", getRukovoditel());
		attributes.put("sozdal", getSozdal());
		attributes.put("vbk_id", getVbk_id());
		attributes.put("zakazchiki_id", getZakazchiki_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String adres = (String)attributes.get("adres");

		if (adres != null) {
			setAdres(adres);
		}

		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		String ein = (String)attributes.get("ein");

		if (ein != null) {
			setEin(ein);
		}

		Long fbk_id = (Long)attributes.get("fbk_id");

		if (fbk_id != null) {
			setFbk_id(fbk_id);
		}

		String gorod = (String)attributes.get("gorod");

		if (gorod != null) {
			setGorod(gorod);
		}

		String inn = (String)attributes.get("inn");

		if (inn != null) {
			setInn(inn);
		}

		Long istochnik_finansirovanija_id = (Long)attributes.get(
				"istochnik_finansirovanija_id");

		if (istochnik_finansirovanija_id != null) {
			setIstochnik_finansirovanija_id(istochnik_finansirovanija_id);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		String je_pochta = (String)attributes.get("je_pochta");

		if (je_pochta != null) {
			setJe_pochta(je_pochta);
		}

		String kontaktnyj_telefon = (String)attributes.get("kontaktnyj_telefon");

		if (kontaktnyj_telefon != null) {
			setKontaktnyj_telefon(kontaktnyj_telefon);
		}

		Long kvalificirovannaja_organizacija = (Long)attributes.get(
				"kvalificirovannaja_organizacija");

		if (kvalificirovannaja_organizacija != null) {
			setKvalificirovannaja_organizacija(kvalificirovannaja_organizacija);
		}

		String naimenovanie = (String)attributes.get("naimenovanie");

		if (naimenovanie != null) {
			setNaimenovanie(naimenovanie);
		}

		Long oblast_id = (Long)attributes.get("oblast_id");

		if (oblast_id != null) {
			setOblast_id(oblast_id);
		}

		String otvetstvennoe_lico = (String)attributes.get("otvetstvennoe_lico");

		if (otvetstvennoe_lico != null) {
			setOtvetstvennoe_lico(otvetstvennoe_lico);
		}

		Long rajon_id = (Long)attributes.get("rajon_id");

		if (rajon_id != null) {
			setRajon_id(rajon_id);
		}

		String rukovoditel = (String)attributes.get("rukovoditel");

		if (rukovoditel != null) {
			setRukovoditel(rukovoditel);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}

		Long vbk_id = (Long)attributes.get("vbk_id");

		if (vbk_id != null) {
			setVbk_id(vbk_id);
		}

		Long zakazchiki_id = (Long)attributes.get("zakazchiki_id");

		if (zakazchiki_id != null) {
			setZakazchiki_id(zakazchiki_id);
		}
	}

	@JSON
	@Override
	public String getAdres() {
		if (_adres == null) {
			return StringPool.BLANK;
		}
		else {
			return _adres;
		}
	}

	@Override
	public void setAdres(String adres) {
		_adres = adres;
	}

	@JSON
	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public String getEin() {
		if (_ein == null) {
			return StringPool.BLANK;
		}
		else {
			return _ein;
		}
	}

	@Override
	public void setEin(String ein) {
		_ein = ein;
	}

	@JSON
	@Override
	public long getFbk_id() {
		return _fbk_id;
	}

	@Override
	public void setFbk_id(long fbk_id) {
		_fbk_id = fbk_id;
	}

	@JSON
	@Override
	public String getGorod() {
		if (_gorod == null) {
			return StringPool.BLANK;
		}
		else {
			return _gorod;
		}
	}

	@Override
	public void setGorod(String gorod) {
		_gorod = gorod;
	}

	@JSON
	@Override
	public String getInn() {
		if (_inn == null) {
			return StringPool.BLANK;
		}
		else {
			return _inn;
		}
	}

	@Override
	public void setInn(String inn) {
		_inn = inn;
	}

	@JSON
	@Override
	public long getIstochnik_finansirovanija_id() {
		return _istochnik_finansirovanija_id;
	}

	@Override
	public void setIstochnik_finansirovanija_id(
		long istochnik_finansirovanija_id) {
		_istochnik_finansirovanija_id = istochnik_finansirovanija_id;
	}

	@JSON
	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@JSON
	@Override
	public String getJe_pochta() {
		if (_je_pochta == null) {
			return StringPool.BLANK;
		}
		else {
			return _je_pochta;
		}
	}

	@Override
	public void setJe_pochta(String je_pochta) {
		_je_pochta = je_pochta;
	}

	@JSON
	@Override
	public String getKontaktnyj_telefon() {
		if (_kontaktnyj_telefon == null) {
			return StringPool.BLANK;
		}
		else {
			return _kontaktnyj_telefon;
		}
	}

	@Override
	public void setKontaktnyj_telefon(String kontaktnyj_telefon) {
		_kontaktnyj_telefon = kontaktnyj_telefon;
	}

	@JSON
	@Override
	public long getKvalificirovannaja_organizacija() {
		return _kvalificirovannaja_organizacija;
	}

	@Override
	public void setKvalificirovannaja_organizacija(
		long kvalificirovannaja_organizacija) {
		_kvalificirovannaja_organizacija = kvalificirovannaja_organizacija;
	}

	@JSON
	@Override
	public String getNaimenovanie() {
		if (_naimenovanie == null) {
			return StringPool.BLANK;
		}
		else {
			return _naimenovanie;
		}
	}

	@Override
	public void setNaimenovanie(String naimenovanie) {
		_naimenovanie = naimenovanie;
	}

	@JSON
	@Override
	public long getOblast_id() {
		return _oblast_id;
	}

	@Override
	public void setOblast_id(long oblast_id) {
		_oblast_id = oblast_id;
	}

	@JSON
	@Override
	public String getOtvetstvennoe_lico() {
		if (_otvetstvennoe_lico == null) {
			return StringPool.BLANK;
		}
		else {
			return _otvetstvennoe_lico;
		}
	}

	@Override
	public void setOtvetstvennoe_lico(String otvetstvennoe_lico) {
		_otvetstvennoe_lico = otvetstvennoe_lico;
	}

	@JSON
	@Override
	public long getRajon_id() {
		return _rajon_id;
	}

	@Override
	public void setRajon_id(long rajon_id) {
		_rajon_id = rajon_id;
	}

	@JSON
	@Override
	public String getRukovoditel() {
		if (_rukovoditel == null) {
			return StringPool.BLANK;
		}
		else {
			return _rukovoditel;
		}
	}

	@Override
	public void setRukovoditel(String rukovoditel) {
		_rukovoditel = rukovoditel;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@JSON
	@Override
	public long getVbk_id() {
		return _vbk_id;
	}

	@Override
	public void setVbk_id(long vbk_id) {
		_vbk_id = vbk_id;
	}

	@JSON
	@Override
	public long getZakazchiki_id() {
		return _zakazchiki_id;
	}

	@Override
	public void setZakazchiki_id(long zakazchiki_id) {
		_zakazchiki_id = zakazchiki_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			zakazchiki.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public zakazchiki toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (zakazchiki)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		zakazchikiImpl zakazchikiImpl = new zakazchikiImpl();

		zakazchikiImpl.setAdres(getAdres());
		zakazchikiImpl.setData_izmenenija(getData_izmenenija());
		zakazchikiImpl.setData_sozdanija(getData_sozdanija());
		zakazchikiImpl.setEin(getEin());
		zakazchikiImpl.setFbk_id(getFbk_id());
		zakazchikiImpl.setGorod(getGorod());
		zakazchikiImpl.setInn(getInn());
		zakazchikiImpl.setIstochnik_finansirovanija_id(getIstochnik_finansirovanija_id());
		zakazchikiImpl.setIzmenil(getIzmenil());
		zakazchikiImpl.setJe_pochta(getJe_pochta());
		zakazchikiImpl.setKontaktnyj_telefon(getKontaktnyj_telefon());
		zakazchikiImpl.setKvalificirovannaja_organizacija(getKvalificirovannaja_organizacija());
		zakazchikiImpl.setNaimenovanie(getNaimenovanie());
		zakazchikiImpl.setOblast_id(getOblast_id());
		zakazchikiImpl.setOtvetstvennoe_lico(getOtvetstvennoe_lico());
		zakazchikiImpl.setRajon_id(getRajon_id());
		zakazchikiImpl.setRukovoditel(getRukovoditel());
		zakazchikiImpl.setSozdal(getSozdal());
		zakazchikiImpl.setVbk_id(getVbk_id());
		zakazchikiImpl.setZakazchiki_id(getZakazchiki_id());

		zakazchikiImpl.resetOriginalValues();

		return zakazchikiImpl;
	}

	@Override
	public int compareTo(zakazchiki zakazchiki) {
		long primaryKey = zakazchiki.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof zakazchiki)) {
			return false;
		}

		zakazchiki zakazchiki = (zakazchiki)obj;

		long primaryKey = zakazchiki.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<zakazchiki> toCacheModel() {
		zakazchikiCacheModel zakazchikiCacheModel = new zakazchikiCacheModel();

		zakazchikiCacheModel.adres = getAdres();

		String adres = zakazchikiCacheModel.adres;

		if ((adres != null) && (adres.length() == 0)) {
			zakazchikiCacheModel.adres = null;
		}

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			zakazchikiCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			zakazchikiCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			zakazchikiCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			zakazchikiCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		zakazchikiCacheModel.ein = getEin();

		String ein = zakazchikiCacheModel.ein;

		if ((ein != null) && (ein.length() == 0)) {
			zakazchikiCacheModel.ein = null;
		}

		zakazchikiCacheModel.fbk_id = getFbk_id();

		zakazchikiCacheModel.gorod = getGorod();

		String gorod = zakazchikiCacheModel.gorod;

		if ((gorod != null) && (gorod.length() == 0)) {
			zakazchikiCacheModel.gorod = null;
		}

		zakazchikiCacheModel.inn = getInn();

		String inn = zakazchikiCacheModel.inn;

		if ((inn != null) && (inn.length() == 0)) {
			zakazchikiCacheModel.inn = null;
		}

		zakazchikiCacheModel.istochnik_finansirovanija_id = getIstochnik_finansirovanija_id();

		zakazchikiCacheModel.izmenil = getIzmenil();

		zakazchikiCacheModel.je_pochta = getJe_pochta();

		String je_pochta = zakazchikiCacheModel.je_pochta;

		if ((je_pochta != null) && (je_pochta.length() == 0)) {
			zakazchikiCacheModel.je_pochta = null;
		}

		zakazchikiCacheModel.kontaktnyj_telefon = getKontaktnyj_telefon();

		String kontaktnyj_telefon = zakazchikiCacheModel.kontaktnyj_telefon;

		if ((kontaktnyj_telefon != null) && (kontaktnyj_telefon.length() == 0)) {
			zakazchikiCacheModel.kontaktnyj_telefon = null;
		}

		zakazchikiCacheModel.kvalificirovannaja_organizacija = getKvalificirovannaja_organizacija();

		zakazchikiCacheModel.naimenovanie = getNaimenovanie();

		String naimenovanie = zakazchikiCacheModel.naimenovanie;

		if ((naimenovanie != null) && (naimenovanie.length() == 0)) {
			zakazchikiCacheModel.naimenovanie = null;
		}

		zakazchikiCacheModel.oblast_id = getOblast_id();

		zakazchikiCacheModel.otvetstvennoe_lico = getOtvetstvennoe_lico();

		String otvetstvennoe_lico = zakazchikiCacheModel.otvetstvennoe_lico;

		if ((otvetstvennoe_lico != null) && (otvetstvennoe_lico.length() == 0)) {
			zakazchikiCacheModel.otvetstvennoe_lico = null;
		}

		zakazchikiCacheModel.rajon_id = getRajon_id();

		zakazchikiCacheModel.rukovoditel = getRukovoditel();

		String rukovoditel = zakazchikiCacheModel.rukovoditel;

		if ((rukovoditel != null) && (rukovoditel.length() == 0)) {
			zakazchikiCacheModel.rukovoditel = null;
		}

		zakazchikiCacheModel.sozdal = getSozdal();

		zakazchikiCacheModel.vbk_id = getVbk_id();

		zakazchikiCacheModel.zakazchiki_id = getZakazchiki_id();

		return zakazchikiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{adres=");
		sb.append(getAdres());
		sb.append(", data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", ein=");
		sb.append(getEin());
		sb.append(", fbk_id=");
		sb.append(getFbk_id());
		sb.append(", gorod=");
		sb.append(getGorod());
		sb.append(", inn=");
		sb.append(getInn());
		sb.append(", istochnik_finansirovanija_id=");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", je_pochta=");
		sb.append(getJe_pochta());
		sb.append(", kontaktnyj_telefon=");
		sb.append(getKontaktnyj_telefon());
		sb.append(", kvalificirovannaja_organizacija=");
		sb.append(getKvalificirovannaja_organizacija());
		sb.append(", naimenovanie=");
		sb.append(getNaimenovanie());
		sb.append(", oblast_id=");
		sb.append(getOblast_id());
		sb.append(", otvetstvennoe_lico=");
		sb.append(getOtvetstvennoe_lico());
		sb.append(", rajon_id=");
		sb.append(getRajon_id());
		sb.append(", rukovoditel=");
		sb.append(getRukovoditel());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append(", vbk_id=");
		sb.append(getVbk_id());
		sb.append(", zakazchiki_id=");
		sb.append(getZakazchiki_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("tj.zakazchiki.model.zakazchiki");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>adres</column-name><column-value><![CDATA[");
		sb.append(getAdres());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ein</column-name><column-value><![CDATA[");
		sb.append(getEin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fbk_id</column-name><column-value><![CDATA[");
		sb.append(getFbk_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gorod</column-name><column-value><![CDATA[");
		sb.append(getGorod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inn</column-name><column-value><![CDATA[");
		sb.append(getInn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>istochnik_finansirovanija_id</column-name><column-value><![CDATA[");
		sb.append(getIstochnik_finansirovanija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>je_pochta</column-name><column-value><![CDATA[");
		sb.append(getJe_pochta());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kontaktnyj_telefon</column-name><column-value><![CDATA[");
		sb.append(getKontaktnyj_telefon());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kvalificirovannaja_organizacija</column-name><column-value><![CDATA[");
		sb.append(getKvalificirovannaja_organizacija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naimenovanie</column-name><column-value><![CDATA[");
		sb.append(getNaimenovanie());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oblast_id</column-name><column-value><![CDATA[");
		sb.append(getOblast_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otvetstvennoe_lico</column-name><column-value><![CDATA[");
		sb.append(getOtvetstvennoe_lico());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rajon_id</column-name><column-value><![CDATA[");
		sb.append(getRajon_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rukovoditel</column-name><column-value><![CDATA[");
		sb.append(getRukovoditel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vbk_id</column-name><column-value><![CDATA[");
		sb.append(getVbk_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zakazchiki_id</column-name><column-value><![CDATA[");
		sb.append(getZakazchiki_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = zakazchiki.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			zakazchiki.class
		};
	private String _adres;
	private Date _data_izmenenija;
	private Date _data_sozdanija;
	private String _ein;
	private long _fbk_id;
	private String _gorod;
	private String _inn;
	private long _istochnik_finansirovanija_id;
	private long _izmenil;
	private String _je_pochta;
	private String _kontaktnyj_telefon;
	private long _kvalificirovannaja_organizacija;
	private String _naimenovanie;
	private long _oblast_id;
	private String _otvetstvennoe_lico;
	private long _rajon_id;
	private String _rukovoditel;
	private long _sozdal;
	private long _vbk_id;
	private long _zakazchiki_id;
	private zakazchiki _escapedModel;
}