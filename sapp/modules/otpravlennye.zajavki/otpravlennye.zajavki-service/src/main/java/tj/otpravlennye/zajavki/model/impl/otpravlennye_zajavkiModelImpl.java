/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.otpravlennye.zajavki.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.otpravlennye.zajavki.model.otpravlennye_zajavki;
import tj.otpravlennye.zajavki.model.otpravlennye_zajavkiModel;
import tj.otpravlennye.zajavki.model.otpravlennye_zajavkiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the otpravlennye_zajavki service. Represents a row in the &quot;sapp.otpravlennye_zajavki&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link otpravlennye_zajavkiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link otpravlennye_zajavkiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see otpravlennye_zajavkiImpl
 * @see otpravlennye_zajavki
 * @see otpravlennye_zajavkiModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class otpravlennye_zajavkiModelImpl extends BaseModelImpl<otpravlennye_zajavki>
	implements otpravlennye_zajavkiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a otpravlennye_zajavki model instance should use the {@link otpravlennye_zajavki} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.otpravlennye_zajavki";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "data_otpravki", Types.TIMESTAMP },
			{ "izmenil", Types.BIGINT },
			{ "izvewenie_id", Types.BIGINT },
			{ "kolichestvo_otpravok", Types.BIGINT },
			{ "lot_id", Types.BIGINT },
			{ "otpravil", Types.BIGINT },
			{ "otpravlennye_zajavki_id", Types.BIGINT },
			{ "postavwik_id", Types.BIGINT },
			{ "status", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_otpravki", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izvewenie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("kolichestvo_otpravok", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lot_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("otpravil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("otpravlennye_zajavki_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postavwik_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.otpravlennye_zajavki (data_izmenenija DATE null,data_otpravki DATE null,izmenil LONG,izvewenie_id LONG,kolichestvo_otpravok LONG,lot_id LONG,otpravil LONG,otpravlennye_zajavki_id LONG not null primary key,postavwik_id LONG,status LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.otpravlennye_zajavki";
	public static final String ORDER_BY_JPQL = " ORDER BY otpravlennye_zajavki.otpravlennye_zajavki_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.otpravlennye_zajavki.otpravlennye_zajavki_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.otpravlennye.zajavki.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.otpravlennye.zajavki.model.otpravlennye_zajavki"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.otpravlennye.zajavki.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.otpravlennye.zajavki.model.otpravlennye_zajavki"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static otpravlennye_zajavki toModel(
		otpravlennye_zajavkiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		otpravlennye_zajavki model = new otpravlennye_zajavkiImpl();

		model.setData_izmenenija(soapModel.getData_izmenenija());
		model.setData_otpravki(soapModel.getData_otpravki());
		model.setIzmenil(soapModel.getIzmenil());
		model.setIzvewenie_id(soapModel.getIzvewenie_id());
		model.setKolichestvo_otpravok(soapModel.getKolichestvo_otpravok());
		model.setLot_id(soapModel.getLot_id());
		model.setOtpravil(soapModel.getOtpravil());
		model.setOtpravlennye_zajavki_id(soapModel.getOtpravlennye_zajavki_id());
		model.setPostavwik_id(soapModel.getPostavwik_id());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<otpravlennye_zajavki> toModels(
		otpravlennye_zajavkiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<otpravlennye_zajavki> models = new ArrayList<otpravlennye_zajavki>(soapModels.length);

		for (otpravlennye_zajavkiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.otpravlennye.zajavki.service.util.ServiceProps.get(
				"lock.expiration.time.tj.otpravlennye.zajavki.model.otpravlennye_zajavki"));

	public otpravlennye_zajavkiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _otpravlennye_zajavki_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOtpravlennye_zajavki_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _otpravlennye_zajavki_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return otpravlennye_zajavki.class;
	}

	@Override
	public String getModelClassName() {
		return otpravlennye_zajavki.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("data_otpravki", getData_otpravki());
		attributes.put("izmenil", getIzmenil());
		attributes.put("izvewenie_id", getIzvewenie_id());
		attributes.put("kolichestvo_otpravok", getKolichestvo_otpravok());
		attributes.put("lot_id", getLot_id());
		attributes.put("otpravil", getOtpravil());
		attributes.put("otpravlennye_zajavki_id", getOtpravlennye_zajavki_id());
		attributes.put("postavwik_id", getPostavwik_id());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		Date data_otpravki = (Date)attributes.get("data_otpravki");

		if (data_otpravki != null) {
			setData_otpravki(data_otpravki);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Long izvewenie_id = (Long)attributes.get("izvewenie_id");

		if (izvewenie_id != null) {
			setIzvewenie_id(izvewenie_id);
		}

		Long kolichestvo_otpravok = (Long)attributes.get("kolichestvo_otpravok");

		if (kolichestvo_otpravok != null) {
			setKolichestvo_otpravok(kolichestvo_otpravok);
		}

		Long lot_id = (Long)attributes.get("lot_id");

		if (lot_id != null) {
			setLot_id(lot_id);
		}

		Long otpravil = (Long)attributes.get("otpravil");

		if (otpravil != null) {
			setOtpravil(otpravil);
		}

		Long otpravlennye_zajavki_id = (Long)attributes.get(
				"otpravlennye_zajavki_id");

		if (otpravlennye_zajavki_id != null) {
			setOtpravlennye_zajavki_id(otpravlennye_zajavki_id);
		}

		Long postavwik_id = (Long)attributes.get("postavwik_id");

		if (postavwik_id != null) {
			setPostavwik_id(postavwik_id);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@JSON
	@Override
	public Date getData_otpravki() {
		return _data_otpravki;
	}

	@Override
	public void setData_otpravki(Date data_otpravki) {
		_data_otpravki = data_otpravki;
	}

	@JSON
	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@JSON
	@Override
	public long getIzvewenie_id() {
		return _izvewenie_id;
	}

	@Override
	public void setIzvewenie_id(long izvewenie_id) {
		_izvewenie_id = izvewenie_id;
	}

	@JSON
	@Override
	public long getKolichestvo_otpravok() {
		return _kolichestvo_otpravok;
	}

	@Override
	public void setKolichestvo_otpravok(long kolichestvo_otpravok) {
		_kolichestvo_otpravok = kolichestvo_otpravok;
	}

	@JSON
	@Override
	public long getLot_id() {
		return _lot_id;
	}

	@Override
	public void setLot_id(long lot_id) {
		_lot_id = lot_id;
	}

	@JSON
	@Override
	public long getOtpravil() {
		return _otpravil;
	}

	@Override
	public void setOtpravil(long otpravil) {
		_otpravil = otpravil;
	}

	@JSON
	@Override
	public long getOtpravlennye_zajavki_id() {
		return _otpravlennye_zajavki_id;
	}

	@Override
	public void setOtpravlennye_zajavki_id(long otpravlennye_zajavki_id) {
		_otpravlennye_zajavki_id = otpravlennye_zajavki_id;
	}

	@JSON
	@Override
	public long getPostavwik_id() {
		return _postavwik_id;
	}

	@Override
	public void setPostavwik_id(long postavwik_id) {
		_postavwik_id = postavwik_id;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			otpravlennye_zajavki.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public otpravlennye_zajavki toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (otpravlennye_zajavki)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		otpravlennye_zajavkiImpl otpravlennye_zajavkiImpl = new otpravlennye_zajavkiImpl();

		otpravlennye_zajavkiImpl.setData_izmenenija(getData_izmenenija());
		otpravlennye_zajavkiImpl.setData_otpravki(getData_otpravki());
		otpravlennye_zajavkiImpl.setIzmenil(getIzmenil());
		otpravlennye_zajavkiImpl.setIzvewenie_id(getIzvewenie_id());
		otpravlennye_zajavkiImpl.setKolichestvo_otpravok(getKolichestvo_otpravok());
		otpravlennye_zajavkiImpl.setLot_id(getLot_id());
		otpravlennye_zajavkiImpl.setOtpravil(getOtpravil());
		otpravlennye_zajavkiImpl.setOtpravlennye_zajavki_id(getOtpravlennye_zajavki_id());
		otpravlennye_zajavkiImpl.setPostavwik_id(getPostavwik_id());
		otpravlennye_zajavkiImpl.setStatus(getStatus());

		otpravlennye_zajavkiImpl.resetOriginalValues();

		return otpravlennye_zajavkiImpl;
	}

	@Override
	public int compareTo(otpravlennye_zajavki otpravlennye_zajavki) {
		long primaryKey = otpravlennye_zajavki.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof otpravlennye_zajavki)) {
			return false;
		}

		otpravlennye_zajavki otpravlennye_zajavki = (otpravlennye_zajavki)obj;

		long primaryKey = otpravlennye_zajavki.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<otpravlennye_zajavki> toCacheModel() {
		otpravlennye_zajavkiCacheModel otpravlennye_zajavkiCacheModel = new otpravlennye_zajavkiCacheModel();

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			otpravlennye_zajavkiCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			otpravlennye_zajavkiCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		Date data_otpravki = getData_otpravki();

		if (data_otpravki != null) {
			otpravlennye_zajavkiCacheModel.data_otpravki = data_otpravki.getTime();
		}
		else {
			otpravlennye_zajavkiCacheModel.data_otpravki = Long.MIN_VALUE;
		}

		otpravlennye_zajavkiCacheModel.izmenil = getIzmenil();

		otpravlennye_zajavkiCacheModel.izvewenie_id = getIzvewenie_id();

		otpravlennye_zajavkiCacheModel.kolichestvo_otpravok = getKolichestvo_otpravok();

		otpravlennye_zajavkiCacheModel.lot_id = getLot_id();

		otpravlennye_zajavkiCacheModel.otpravil = getOtpravil();

		otpravlennye_zajavkiCacheModel.otpravlennye_zajavki_id = getOtpravlennye_zajavki_id();

		otpravlennye_zajavkiCacheModel.postavwik_id = getPostavwik_id();

		otpravlennye_zajavkiCacheModel.status = getStatus();

		return otpravlennye_zajavkiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", data_otpravki=");
		sb.append(getData_otpravki());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", izvewenie_id=");
		sb.append(getIzvewenie_id());
		sb.append(", kolichestvo_otpravok=");
		sb.append(getKolichestvo_otpravok());
		sb.append(", lot_id=");
		sb.append(getLot_id());
		sb.append(", otpravil=");
		sb.append(getOtpravil());
		sb.append(", otpravlennye_zajavki_id=");
		sb.append(getOtpravlennye_zajavki_id());
		sb.append(", postavwik_id=");
		sb.append(getPostavwik_id());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("tj.otpravlennye.zajavki.model.otpravlennye_zajavki");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_otpravki</column-name><column-value><![CDATA[");
		sb.append(getData_otpravki());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izvewenie_id</column-name><column-value><![CDATA[");
		sb.append(getIzvewenie_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kolichestvo_otpravok</column-name><column-value><![CDATA[");
		sb.append(getKolichestvo_otpravok());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lot_id</column-name><column-value><![CDATA[");
		sb.append(getLot_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otpravil</column-name><column-value><![CDATA[");
		sb.append(getOtpravil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otpravlennye_zajavki_id</column-name><column-value><![CDATA[");
		sb.append(getOtpravlennye_zajavki_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postavwik_id</column-name><column-value><![CDATA[");
		sb.append(getPostavwik_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = otpravlennye_zajavki.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			otpravlennye_zajavki.class
		};
	private Date _data_izmenenija;
	private Date _data_otpravki;
	private long _izmenil;
	private long _izvewenie_id;
	private long _kolichestvo_otpravok;
	private long _lot_id;
	private long _otpravil;
	private long _otpravlennye_zajavki_id;
	private long _postavwik_id;
	private long _status;
	private otpravlennye_zajavki _escapedModel;
}