/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.revision.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.revision.model.revision;
import tj.revision.model.revisionModel;
import tj.revision.model.revisionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the revision service. Represents a row in the &quot;sapp.revision&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link revisionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link revisionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see revisionImpl
 * @see revision
 * @see revisionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class revisionModelImpl extends BaseModelImpl<revision>
	implements revisionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a revision model instance should use the {@link revision} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.revision";
	public static final Object[][] TABLE_COLUMNS = {
			{ "date_", Types.TIMESTAMP },
			{ "revision_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("revision_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.revision (date_ DATE null,revision_id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table sapp.revision";
	public static final String ORDER_BY_JPQL = " ORDER BY revision.revision_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.revision.revision_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.revision.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.revision.model.revision"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.revision.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.revision.model.revision"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static revision toModel(revisionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		revision model = new revisionImpl();

		model.setDate(soapModel.getDate());
		model.setRevision_id(soapModel.getRevision_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<revision> toModels(revisionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<revision> models = new ArrayList<revision>(soapModels.length);

		for (revisionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.revision.service.util.ServiceProps.get(
				"lock.expiration.time.tj.revision.model.revision"));

	public revisionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _revision_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRevision_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _revision_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return revision.class;
	}

	@Override
	public String getModelClassName() {
		return revision.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("date", getDate());
		attributes.put("revision_id", getRevision_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		Long revision_id = (Long)attributes.get("revision_id");

		if (revision_id != null) {
			setRevision_id(revision_id);
		}
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@JSON
	@Override
	public long getRevision_id() {
		return _revision_id;
	}

	@Override
	public void setRevision_id(long revision_id) {
		_revision_id = revision_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			revision.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public revision toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (revision)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		revisionImpl revisionImpl = new revisionImpl();

		revisionImpl.setDate(getDate());
		revisionImpl.setRevision_id(getRevision_id());

		revisionImpl.resetOriginalValues();

		return revisionImpl;
	}

	@Override
	public int compareTo(revision revision) {
		long primaryKey = revision.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof revision)) {
			return false;
		}

		revision revision = (revision)obj;

		long primaryKey = revision.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<revision> toCacheModel() {
		revisionCacheModel revisionCacheModel = new revisionCacheModel();

		Date date = getDate();

		if (date != null) {
			revisionCacheModel.date = date.getTime();
		}
		else {
			revisionCacheModel.date = Long.MIN_VALUE;
		}

		revisionCacheModel.revision_id = getRevision_id();

		return revisionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{date=");
		sb.append(getDate());
		sb.append(", revision_id=");
		sb.append(getRevision_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("tj.revision.model.revision");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>revision_id</column-name><column-value><![CDATA[");
		sb.append(getRevision_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = revision.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			revision.class
		};
	private Date _date;
	private long _revision_id;
	private revision _escapedModel;
}