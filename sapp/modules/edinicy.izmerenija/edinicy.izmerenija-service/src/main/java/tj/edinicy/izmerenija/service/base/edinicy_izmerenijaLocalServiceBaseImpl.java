/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.edinicy.izmerenija.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.edinicy.izmerenija.model.edinicy_izmerenija;
import tj.edinicy.izmerenija.service.edinicy_izmerenijaLocalService;
import tj.edinicy.izmerenija.service.persistence.edinicy_izmerenijaPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the edinicy_izmerenija local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.edinicy.izmerenija.service.impl.edinicy_izmerenijaLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.edinicy.izmerenija.service.impl.edinicy_izmerenijaLocalServiceImpl
 * @see tj.edinicy.izmerenija.service.edinicy_izmerenijaLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class edinicy_izmerenijaLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements edinicy_izmerenijaLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.edinicy.izmerenija.service.edinicy_izmerenijaLocalServiceUtil} to access the edinicy_izmerenija local service.
	 */

	/**
	 * Adds the edinicy_izmerenija to the database. Also notifies the appropriate model listeners.
	 *
	 * @param edinicy_izmerenija the edinicy_izmerenija
	 * @return the edinicy_izmerenija that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public edinicy_izmerenija addedinicy_izmerenija(
		edinicy_izmerenija edinicy_izmerenija) {
		edinicy_izmerenija.setNew(true);

		return edinicy_izmerenijaPersistence.update(edinicy_izmerenija);
	}

	/**
	 * Creates a new edinicy_izmerenija with the primary key. Does not add the edinicy_izmerenija to the database.
	 *
	 * @param edinicy_izmerenija_id the primary key for the new edinicy_izmerenija
	 * @return the new edinicy_izmerenija
	 */
	@Override
	public edinicy_izmerenija createedinicy_izmerenija(
		long edinicy_izmerenija_id) {
		return edinicy_izmerenijaPersistence.create(edinicy_izmerenija_id);
	}

	/**
	 * Deletes the edinicy_izmerenija with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param edinicy_izmerenija_id the primary key of the edinicy_izmerenija
	 * @return the edinicy_izmerenija that was removed
	 * @throws PortalException if a edinicy_izmerenija with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public edinicy_izmerenija deleteedinicy_izmerenija(
		long edinicy_izmerenija_id) throws PortalException {
		return edinicy_izmerenijaPersistence.remove(edinicy_izmerenija_id);
	}

	/**
	 * Deletes the edinicy_izmerenija from the database. Also notifies the appropriate model listeners.
	 *
	 * @param edinicy_izmerenija the edinicy_izmerenija
	 * @return the edinicy_izmerenija that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public edinicy_izmerenija deleteedinicy_izmerenija(
		edinicy_izmerenija edinicy_izmerenija) {
		return edinicy_izmerenijaPersistence.remove(edinicy_izmerenija);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(edinicy_izmerenija.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return edinicy_izmerenijaPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.edinicy.izmerenija.model.impl.edinicy_izmerenijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return edinicy_izmerenijaPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.edinicy.izmerenija.model.impl.edinicy_izmerenijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return edinicy_izmerenijaPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return edinicy_izmerenijaPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return edinicy_izmerenijaPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public edinicy_izmerenija fetchedinicy_izmerenija(
		long edinicy_izmerenija_id) {
		return edinicy_izmerenijaPersistence.fetchByPrimaryKey(edinicy_izmerenija_id);
	}

	/**
	 * Returns the edinicy_izmerenija with the primary key.
	 *
	 * @param edinicy_izmerenija_id the primary key of the edinicy_izmerenija
	 * @return the edinicy_izmerenija
	 * @throws PortalException if a edinicy_izmerenija with the primary key could not be found
	 */
	@Override
	public edinicy_izmerenija getedinicy_izmerenija(long edinicy_izmerenija_id)
		throws PortalException {
		return edinicy_izmerenijaPersistence.findByPrimaryKey(edinicy_izmerenija_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(edinicy_izmerenijaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(edinicy_izmerenija.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"edinicy_izmerenija_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(edinicy_izmerenijaLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(edinicy_izmerenija.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"edinicy_izmerenija_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(edinicy_izmerenijaLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(edinicy_izmerenija.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"edinicy_izmerenija_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return edinicy_izmerenijaLocalService.deleteedinicy_izmerenija((edinicy_izmerenija)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return edinicy_izmerenijaPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the edinicy_izmerenijas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.edinicy.izmerenija.model.impl.edinicy_izmerenijaModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of edinicy_izmerenijas
	 * @param end the upper bound of the range of edinicy_izmerenijas (not inclusive)
	 * @return the range of edinicy_izmerenijas
	 */
	@Override
	public List<edinicy_izmerenija> getedinicy_izmerenijas(int start, int end) {
		return edinicy_izmerenijaPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of edinicy_izmerenijas.
	 *
	 * @return the number of edinicy_izmerenijas
	 */
	@Override
	public int getedinicy_izmerenijasCount() {
		return edinicy_izmerenijaPersistence.countAll();
	}

	/**
	 * Updates the edinicy_izmerenija in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param edinicy_izmerenija the edinicy_izmerenija
	 * @return the edinicy_izmerenija that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public edinicy_izmerenija updateedinicy_izmerenija(
		edinicy_izmerenija edinicy_izmerenija) {
		return edinicy_izmerenijaPersistence.update(edinicy_izmerenija);
	}

	/**
	 * Returns the edinicy_izmerenija local service.
	 *
	 * @return the edinicy_izmerenija local service
	 */
	public edinicy_izmerenijaLocalService getedinicy_izmerenijaLocalService() {
		return edinicy_izmerenijaLocalService;
	}

	/**
	 * Sets the edinicy_izmerenija local service.
	 *
	 * @param edinicy_izmerenijaLocalService the edinicy_izmerenija local service
	 */
	public void setedinicy_izmerenijaLocalService(
		edinicy_izmerenijaLocalService edinicy_izmerenijaLocalService) {
		this.edinicy_izmerenijaLocalService = edinicy_izmerenijaLocalService;
	}

	/**
	 * Returns the edinicy_izmerenija persistence.
	 *
	 * @return the edinicy_izmerenija persistence
	 */
	public edinicy_izmerenijaPersistence getedinicy_izmerenijaPersistence() {
		return edinicy_izmerenijaPersistence;
	}

	/**
	 * Sets the edinicy_izmerenija persistence.
	 *
	 * @param edinicy_izmerenijaPersistence the edinicy_izmerenija persistence
	 */
	public void setedinicy_izmerenijaPersistence(
		edinicy_izmerenijaPersistence edinicy_izmerenijaPersistence) {
		this.edinicy_izmerenijaPersistence = edinicy_izmerenijaPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.edinicy.izmerenija.model.edinicy_izmerenija",
			edinicy_izmerenijaLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.edinicy.izmerenija.model.edinicy_izmerenija");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return edinicy_izmerenijaLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return edinicy_izmerenija.class;
	}

	protected String getModelClassName() {
		return edinicy_izmerenija.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = edinicy_izmerenijaPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = edinicy_izmerenijaLocalService.class)
	protected edinicy_izmerenijaLocalService edinicy_izmerenijaLocalService;
	@BeanReference(type = edinicy_izmerenijaPersistence.class)
	protected edinicy_izmerenijaPersistence edinicy_izmerenijaPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}