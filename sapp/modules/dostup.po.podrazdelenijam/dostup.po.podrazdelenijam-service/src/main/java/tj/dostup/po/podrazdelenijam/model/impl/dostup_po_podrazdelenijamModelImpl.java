/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.dostup.po.podrazdelenijam.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam;
import tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijamModel;
import tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijamSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the dostup_po_podrazdelenijam service. Represents a row in the &quot;sapp.dostup_po_podrazdelenijam&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link dostup_po_podrazdelenijamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link dostup_po_podrazdelenijamImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see dostup_po_podrazdelenijamImpl
 * @see dostup_po_podrazdelenijam
 * @see dostup_po_podrazdelenijamModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class dostup_po_podrazdelenijamModelImpl extends BaseModelImpl<dostup_po_podrazdelenijam>
	implements dostup_po_podrazdelenijamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dostup_po_podrazdelenijam model instance should use the {@link dostup_po_podrazdelenijam} interface instead.
	 */
	public static final String TABLE_NAME = "sapp.dostup_po_podrazdelenijam";
	public static final Object[][] TABLE_COLUMNS = {
			{ "data_izmenenija", Types.TIMESTAMP },
			{ "data_sozdanija", Types.TIMESTAMP },
			{ "dostup_po_podrazdelenijam_id", Types.BIGINT },
			{ "izmenil", Types.BIGINT },
			{ "podrazdelenija_id", Types.BIGINT },
			{ "polzovateli_id", Types.BIGINT },
			{ "sozdal", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("data_izmenenija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_sozdanija", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dostup_po_podrazdelenijam_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("izmenil", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("podrazdelenija_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("polzovateli_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sozdal", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sapp.dostup_po_podrazdelenijam (data_izmenenija DATE null,data_sozdanija DATE null,dostup_po_podrazdelenijam_id LONG not null primary key,izmenil LONG,podrazdelenija_id LONG,polzovateli_id LONG,sozdal LONG)";
	public static final String TABLE_SQL_DROP = "drop table sapp.dostup_po_podrazdelenijam";
	public static final String ORDER_BY_JPQL = " ORDER BY dostup_po_podrazdelenijam.dostup_po_podrazdelenijam_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sapp.dostup_po_podrazdelenijam.dostup_po_podrazdelenijam_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(tj.dostup.po.podrazdelenijam.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(tj.dostup.po.podrazdelenijam.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static dostup_po_podrazdelenijam toModel(
		dostup_po_podrazdelenijamSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		dostup_po_podrazdelenijam model = new dostup_po_podrazdelenijamImpl();

		model.setData_izmenenija(soapModel.getData_izmenenija());
		model.setData_sozdanija(soapModel.getData_sozdanija());
		model.setDostup_po_podrazdelenijam_id(soapModel.getDostup_po_podrazdelenijam_id());
		model.setIzmenil(soapModel.getIzmenil());
		model.setPodrazdelenija_id(soapModel.getPodrazdelenija_id());
		model.setPolzovateli_id(soapModel.getPolzovateli_id());
		model.setSozdal(soapModel.getSozdal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<dostup_po_podrazdelenijam> toModels(
		dostup_po_podrazdelenijamSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<dostup_po_podrazdelenijam> models = new ArrayList<dostup_po_podrazdelenijam>(soapModels.length);

		for (dostup_po_podrazdelenijamSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(tj.dostup.po.podrazdelenijam.service.util.ServiceProps.get(
				"lock.expiration.time.tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam"));

	public dostup_po_podrazdelenijamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dostup_po_podrazdelenijam_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDostup_po_podrazdelenijam_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dostup_po_podrazdelenijam_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return dostup_po_podrazdelenijam.class;
	}

	@Override
	public String getModelClassName() {
		return dostup_po_podrazdelenijam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("data_izmenenija", getData_izmenenija());
		attributes.put("data_sozdanija", getData_sozdanija());
		attributes.put("dostup_po_podrazdelenijam_id",
			getDostup_po_podrazdelenijam_id());
		attributes.put("izmenil", getIzmenil());
		attributes.put("podrazdelenija_id", getPodrazdelenija_id());
		attributes.put("polzovateli_id", getPolzovateli_id());
		attributes.put("sozdal", getSozdal());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Date data_izmenenija = (Date)attributes.get("data_izmenenija");

		if (data_izmenenija != null) {
			setData_izmenenija(data_izmenenija);
		}

		Date data_sozdanija = (Date)attributes.get("data_sozdanija");

		if (data_sozdanija != null) {
			setData_sozdanija(data_sozdanija);
		}

		Long dostup_po_podrazdelenijam_id = (Long)attributes.get(
				"dostup_po_podrazdelenijam_id");

		if (dostup_po_podrazdelenijam_id != null) {
			setDostup_po_podrazdelenijam_id(dostup_po_podrazdelenijam_id);
		}

		Long izmenil = (Long)attributes.get("izmenil");

		if (izmenil != null) {
			setIzmenil(izmenil);
		}

		Long podrazdelenija_id = (Long)attributes.get("podrazdelenija_id");

		if (podrazdelenija_id != null) {
			setPodrazdelenija_id(podrazdelenija_id);
		}

		Long polzovateli_id = (Long)attributes.get("polzovateli_id");

		if (polzovateli_id != null) {
			setPolzovateli_id(polzovateli_id);
		}

		Long sozdal = (Long)attributes.get("sozdal");

		if (sozdal != null) {
			setSozdal(sozdal);
		}
	}

	@JSON
	@Override
	public Date getData_izmenenija() {
		return _data_izmenenija;
	}

	@Override
	public void setData_izmenenija(Date data_izmenenija) {
		_data_izmenenija = data_izmenenija;
	}

	@JSON
	@Override
	public Date getData_sozdanija() {
		return _data_sozdanija;
	}

	@Override
	public void setData_sozdanija(Date data_sozdanija) {
		_data_sozdanija = data_sozdanija;
	}

	@JSON
	@Override
	public long getDostup_po_podrazdelenijam_id() {
		return _dostup_po_podrazdelenijam_id;
	}

	@Override
	public void setDostup_po_podrazdelenijam_id(
		long dostup_po_podrazdelenijam_id) {
		_dostup_po_podrazdelenijam_id = dostup_po_podrazdelenijam_id;
	}

	@JSON
	@Override
	public long getIzmenil() {
		return _izmenil;
	}

	@Override
	public void setIzmenil(long izmenil) {
		_izmenil = izmenil;
	}

	@JSON
	@Override
	public long getPodrazdelenija_id() {
		return _podrazdelenija_id;
	}

	@Override
	public void setPodrazdelenija_id(long podrazdelenija_id) {
		_podrazdelenija_id = podrazdelenija_id;
	}

	@JSON
	@Override
	public long getPolzovateli_id() {
		return _polzovateli_id;
	}

	@Override
	public void setPolzovateli_id(long polzovateli_id) {
		_polzovateli_id = polzovateli_id;
	}

	@JSON
	@Override
	public long getSozdal() {
		return _sozdal;
	}

	@Override
	public void setSozdal(long sozdal) {
		_sozdal = sozdal;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			dostup_po_podrazdelenijam.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public dostup_po_podrazdelenijam toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (dostup_po_podrazdelenijam)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		dostup_po_podrazdelenijamImpl dostup_po_podrazdelenijamImpl = new dostup_po_podrazdelenijamImpl();

		dostup_po_podrazdelenijamImpl.setData_izmenenija(getData_izmenenija());
		dostup_po_podrazdelenijamImpl.setData_sozdanija(getData_sozdanija());
		dostup_po_podrazdelenijamImpl.setDostup_po_podrazdelenijam_id(getDostup_po_podrazdelenijam_id());
		dostup_po_podrazdelenijamImpl.setIzmenil(getIzmenil());
		dostup_po_podrazdelenijamImpl.setPodrazdelenija_id(getPodrazdelenija_id());
		dostup_po_podrazdelenijamImpl.setPolzovateli_id(getPolzovateli_id());
		dostup_po_podrazdelenijamImpl.setSozdal(getSozdal());

		dostup_po_podrazdelenijamImpl.resetOriginalValues();

		return dostup_po_podrazdelenijamImpl;
	}

	@Override
	public int compareTo(dostup_po_podrazdelenijam dostup_po_podrazdelenijam) {
		long primaryKey = dostup_po_podrazdelenijam.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof dostup_po_podrazdelenijam)) {
			return false;
		}

		dostup_po_podrazdelenijam dostup_po_podrazdelenijam = (dostup_po_podrazdelenijam)obj;

		long primaryKey = dostup_po_podrazdelenijam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<dostup_po_podrazdelenijam> toCacheModel() {
		dostup_po_podrazdelenijamCacheModel dostup_po_podrazdelenijamCacheModel = new dostup_po_podrazdelenijamCacheModel();

		Date data_izmenenija = getData_izmenenija();

		if (data_izmenenija != null) {
			dostup_po_podrazdelenijamCacheModel.data_izmenenija = data_izmenenija.getTime();
		}
		else {
			dostup_po_podrazdelenijamCacheModel.data_izmenenija = Long.MIN_VALUE;
		}

		Date data_sozdanija = getData_sozdanija();

		if (data_sozdanija != null) {
			dostup_po_podrazdelenijamCacheModel.data_sozdanija = data_sozdanija.getTime();
		}
		else {
			dostup_po_podrazdelenijamCacheModel.data_sozdanija = Long.MIN_VALUE;
		}

		dostup_po_podrazdelenijamCacheModel.dostup_po_podrazdelenijam_id = getDostup_po_podrazdelenijam_id();

		dostup_po_podrazdelenijamCacheModel.izmenil = getIzmenil();

		dostup_po_podrazdelenijamCacheModel.podrazdelenija_id = getPodrazdelenija_id();

		dostup_po_podrazdelenijamCacheModel.polzovateli_id = getPolzovateli_id();

		dostup_po_podrazdelenijamCacheModel.sozdal = getSozdal();

		return dostup_po_podrazdelenijamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{data_izmenenija=");
		sb.append(getData_izmenenija());
		sb.append(", data_sozdanija=");
		sb.append(getData_sozdanija());
		sb.append(", dostup_po_podrazdelenijam_id=");
		sb.append(getDostup_po_podrazdelenijam_id());
		sb.append(", izmenil=");
		sb.append(getIzmenil());
		sb.append(", podrazdelenija_id=");
		sb.append(getPodrazdelenija_id());
		sb.append(", polzovateli_id=");
		sb.append(getPolzovateli_id());
		sb.append(", sozdal=");
		sb.append(getSozdal());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>data_izmenenija</column-name><column-value><![CDATA[");
		sb.append(getData_izmenenija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data_sozdanija</column-name><column-value><![CDATA[");
		sb.append(getData_sozdanija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dostup_po_podrazdelenijam_id</column-name><column-value><![CDATA[");
		sb.append(getDostup_po_podrazdelenijam_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>izmenil</column-name><column-value><![CDATA[");
		sb.append(getIzmenil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>podrazdelenija_id</column-name><column-value><![CDATA[");
		sb.append(getPodrazdelenija_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>polzovateli_id</column-name><column-value><![CDATA[");
		sb.append(getPolzovateli_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sozdal</column-name><column-value><![CDATA[");
		sb.append(getSozdal());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = dostup_po_podrazdelenijam.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			dostup_po_podrazdelenijam.class
		};
	private Date _data_izmenenija;
	private Date _data_sozdanija;
	private long _dostup_po_podrazdelenijam_id;
	private long _izmenil;
	private long _podrazdelenija_id;
	private long _polzovateli_id;
	private long _sozdal;
	private dostup_po_podrazdelenijam _escapedModel;
}