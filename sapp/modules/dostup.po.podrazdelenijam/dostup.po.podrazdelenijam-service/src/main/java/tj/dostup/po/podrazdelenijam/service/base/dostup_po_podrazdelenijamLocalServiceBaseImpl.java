/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tj.dostup.po.podrazdelenijam.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam;
import tj.dostup.po.podrazdelenijam.service.dostup_po_podrazdelenijamLocalService;
import tj.dostup.po.podrazdelenijam.service.persistence.dostup_po_podrazdelenijamPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dostup_po_podrazdelenijam local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link tj.dostup.po.podrazdelenijam.service.impl.dostup_po_podrazdelenijamLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see tj.dostup.po.podrazdelenijam.service.impl.dostup_po_podrazdelenijamLocalServiceImpl
 * @see tj.dostup.po.podrazdelenijam.service.dostup_po_podrazdelenijamLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class dostup_po_podrazdelenijamLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements dostup_po_podrazdelenijamLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link tj.dostup.po.podrazdelenijam.service.dostup_po_podrazdelenijamLocalServiceUtil} to access the dostup_po_podrazdelenijam local service.
	 */

	/**
	 * Adds the dostup_po_podrazdelenijam to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dostup_po_podrazdelenijam the dostup_po_podrazdelenijam
	 * @return the dostup_po_podrazdelenijam that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public dostup_po_podrazdelenijam adddostup_po_podrazdelenijam(
		dostup_po_podrazdelenijam dostup_po_podrazdelenijam) {
		dostup_po_podrazdelenijam.setNew(true);

		return dostup_po_podrazdelenijamPersistence.update(dostup_po_podrazdelenijam);
	}

	/**
	 * Creates a new dostup_po_podrazdelenijam with the primary key. Does not add the dostup_po_podrazdelenijam to the database.
	 *
	 * @param dostup_po_podrazdelenijam_id the primary key for the new dostup_po_podrazdelenijam
	 * @return the new dostup_po_podrazdelenijam
	 */
	@Override
	public dostup_po_podrazdelenijam createdostup_po_podrazdelenijam(
		long dostup_po_podrazdelenijam_id) {
		return dostup_po_podrazdelenijamPersistence.create(dostup_po_podrazdelenijam_id);
	}

	/**
	 * Deletes the dostup_po_podrazdelenijam with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dostup_po_podrazdelenijam_id the primary key of the dostup_po_podrazdelenijam
	 * @return the dostup_po_podrazdelenijam that was removed
	 * @throws PortalException if a dostup_po_podrazdelenijam with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public dostup_po_podrazdelenijam deletedostup_po_podrazdelenijam(
		long dostup_po_podrazdelenijam_id) throws PortalException {
		return dostup_po_podrazdelenijamPersistence.remove(dostup_po_podrazdelenijam_id);
	}

	/**
	 * Deletes the dostup_po_podrazdelenijam from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dostup_po_podrazdelenijam the dostup_po_podrazdelenijam
	 * @return the dostup_po_podrazdelenijam that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public dostup_po_podrazdelenijam deletedostup_po_podrazdelenijam(
		dostup_po_podrazdelenijam dostup_po_podrazdelenijam) {
		return dostup_po_podrazdelenijamPersistence.remove(dostup_po_podrazdelenijam);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(dostup_po_podrazdelenijam.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return dostup_po_podrazdelenijamPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.dostup.po.podrazdelenijam.model.impl.dostup_po_podrazdelenijamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return dostup_po_podrazdelenijamPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.dostup.po.podrazdelenijam.model.impl.dostup_po_podrazdelenijamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return dostup_po_podrazdelenijamPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return dostup_po_podrazdelenijamPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return dostup_po_podrazdelenijamPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public dostup_po_podrazdelenijam fetchdostup_po_podrazdelenijam(
		long dostup_po_podrazdelenijam_id) {
		return dostup_po_podrazdelenijamPersistence.fetchByPrimaryKey(dostup_po_podrazdelenijam_id);
	}

	/**
	 * Returns the dostup_po_podrazdelenijam with the primary key.
	 *
	 * @param dostup_po_podrazdelenijam_id the primary key of the dostup_po_podrazdelenijam
	 * @return the dostup_po_podrazdelenijam
	 * @throws PortalException if a dostup_po_podrazdelenijam with the primary key could not be found
	 */
	@Override
	public dostup_po_podrazdelenijam getdostup_po_podrazdelenijam(
		long dostup_po_podrazdelenijam_id) throws PortalException {
		return dostup_po_podrazdelenijamPersistence.findByPrimaryKey(dostup_po_podrazdelenijam_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(dostup_po_podrazdelenijamLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(dostup_po_podrazdelenijam.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"dostup_po_podrazdelenijam_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(dostup_po_podrazdelenijamLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(dostup_po_podrazdelenijam.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"dostup_po_podrazdelenijam_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(dostup_po_podrazdelenijamLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(dostup_po_podrazdelenijam.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"dostup_po_podrazdelenijam_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return dostup_po_podrazdelenijamLocalService.deletedostup_po_podrazdelenijam((dostup_po_podrazdelenijam)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return dostup_po_podrazdelenijamPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dostup_po_podrazdelenijams.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link tj.dostup.po.podrazdelenijam.model.impl.dostup_po_podrazdelenijamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dostup_po_podrazdelenijams
	 * @param end the upper bound of the range of dostup_po_podrazdelenijams (not inclusive)
	 * @return the range of dostup_po_podrazdelenijams
	 */
	@Override
	public List<dostup_po_podrazdelenijam> getdostup_po_podrazdelenijams(
		int start, int end) {
		return dostup_po_podrazdelenijamPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dostup_po_podrazdelenijams.
	 *
	 * @return the number of dostup_po_podrazdelenijams
	 */
	@Override
	public int getdostup_po_podrazdelenijamsCount() {
		return dostup_po_podrazdelenijamPersistence.countAll();
	}

	/**
	 * Updates the dostup_po_podrazdelenijam in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dostup_po_podrazdelenijam the dostup_po_podrazdelenijam
	 * @return the dostup_po_podrazdelenijam that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public dostup_po_podrazdelenijam updatedostup_po_podrazdelenijam(
		dostup_po_podrazdelenijam dostup_po_podrazdelenijam) {
		return dostup_po_podrazdelenijamPersistence.update(dostup_po_podrazdelenijam);
	}

	/**
	 * Returns the dostup_po_podrazdelenijam local service.
	 *
	 * @return the dostup_po_podrazdelenijam local service
	 */
	public dostup_po_podrazdelenijamLocalService getdostup_po_podrazdelenijamLocalService() {
		return dostup_po_podrazdelenijamLocalService;
	}

	/**
	 * Sets the dostup_po_podrazdelenijam local service.
	 *
	 * @param dostup_po_podrazdelenijamLocalService the dostup_po_podrazdelenijam local service
	 */
	public void setdostup_po_podrazdelenijamLocalService(
		dostup_po_podrazdelenijamLocalService dostup_po_podrazdelenijamLocalService) {
		this.dostup_po_podrazdelenijamLocalService = dostup_po_podrazdelenijamLocalService;
	}

	/**
	 * Returns the dostup_po_podrazdelenijam persistence.
	 *
	 * @return the dostup_po_podrazdelenijam persistence
	 */
	public dostup_po_podrazdelenijamPersistence getdostup_po_podrazdelenijamPersistence() {
		return dostup_po_podrazdelenijamPersistence;
	}

	/**
	 * Sets the dostup_po_podrazdelenijam persistence.
	 *
	 * @param dostup_po_podrazdelenijamPersistence the dostup_po_podrazdelenijam persistence
	 */
	public void setdostup_po_podrazdelenijamPersistence(
		dostup_po_podrazdelenijamPersistence dostup_po_podrazdelenijamPersistence) {
		this.dostup_po_podrazdelenijamPersistence = dostup_po_podrazdelenijamPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam",
			dostup_po_podrazdelenijamLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"tj.dostup.po.podrazdelenijam.model.dostup_po_podrazdelenijam");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return dostup_po_podrazdelenijamLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return dostup_po_podrazdelenijam.class;
	}

	protected String getModelClassName() {
		return dostup_po_podrazdelenijam.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = dostup_po_podrazdelenijamPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = dostup_po_podrazdelenijamLocalService.class)
	protected dostup_po_podrazdelenijamLocalService dostup_po_podrazdelenijamLocalService;
	@BeanReference(type = dostup_po_podrazdelenijamPersistence.class)
	protected dostup_po_podrazdelenijamPersistence dostup_po_podrazdelenijamPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}